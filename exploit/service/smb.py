# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-02 22:05
import binascii
import struct
from core.data import gLogger
from async_timeout import timeout
import asyncio


async def check_SMBGhost(addr):
    try:
        with timeout(10):
            reader, writer = await asyncio.open_connection(addr.split(':')[0], int(addr.split(':')[1]))
            pkt = b'\x00\x00\x00\xc0\xfeSMB@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00' \
                  b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' \
                  b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$\x00\x08\x00\x01\x00\x00\x00\x7f\x00\x00' \
                  b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00x\x00\x00\x00\x02\x00\x00\x00\x02' \
                  b'\x02\x10\x02"\x02$\x02\x00\x03\x02\x03\x10\x03\x11\x03\x00\x00\x00\x00\x01\x00&\x00\x00\x00\x00\x00' \
                  b'\x01\x00 \x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' \
                  b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\n\x00\x00\x00\x00\x00\x01\x00\x00' \
                  b'\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00 '
            writer.write(pkt)
            data = await reader.read(4)
            if data:
                nb, = struct.unpack(">I", data)
                data = await reader.read(nb)
                writer.close()
                if data[68:70] == b'\x11\x03' or data[70:72] == b'\x02\x00':
                    gLogger.myscan_info('Target maybe smb SMBGhost, {}'.format(addr))
                    return {'name': 'SMBGhost', 'url': addr, 'software': 'smb'}
    except Exception:
        pass

async def check_MS17010(addr):
    try:
        with timeout(10):
            reader, writer = await asyncio.open_connection(addr.split(':')[0], int(addr.split(':')[1]))
            negotiate_protocol_request = binascii.unhexlify(
                "00000054ff534d42720000000018012800000000000000000000000000002f4b0000c55e003100024c414e4d414e312e3000024c4d312e325830303200024e54204c414e4d414e20312e3000024e54204c4d20302e313200")
            session_setup_request = binascii.unhexlify(
                "00000063ff534d42730000000018012000000000000000000000000000002f4b0000c55e0dff000000dfff02000100000000000000000000000000400000002600002e0057696e646f7773203230303020323139350057696e646f7773203230303020352e3000")
            writer.write(negotiate_protocol_request)
            await reader.read(1024)
            writer.write(session_setup_request)
            res = await reader.read(1024)
            user_id = res[32:34]
            tree_connect_andx_request = "000000%xff534d42750000000018012000000000000000000000000000002f4b%sc55e04ff000000000001001a00005c5c%s5c49504324003f3f3f3f3f00" % (
                (58 + len(addr.split(':')[0])), user_id.hex(), bytes(addr.split(':')[1], 'utf-8').hex())
            writer.write(binascii.unhexlify(tree_connect_andx_request))
            res = await reader.read(1024)
            allid = res[28:36]
            payload = "0000004aff534d422500000000180128000000000000000000000000%s1000000000ffffffff0000000000000000000000004a0000004a0002002300000007005c504950455c00" % allid.hex()
            writer.write(binascii.unhexlify(payload))
            res = await reader.read(1024)
            writer.close()
            if "\x05\x02\x00\xc0" in str(res):
                gLogger.myscan_info('Target maybe smb MS17010, {}'.format(addr))
                return {'name': 'SMBGhost', 'url': addr, 'software': 'smb'}
    except Exception:
        pass


async def smb_scan(addr):
    vul_list = []
    a = await check_MS17010(addr)
    if a is not None:
        vul_list.append(a)
    b = await check_SMBGhost(addr)
    if b is not None:
        vul_list.append(b)
    return vul_list


if __name__ == '__main__':
    pass
