# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-08-27 18:35
from core.data import gLogger
from core.utils.informationprovider import InformationProvider
from async_timeout import timeout
import asyncio


# unauth scan
async def check_unauth(addr):
    with timeout(2):
        reader, writer = await asyncio.open_connection(addr.split(':')[0], int(addr.split(':')[1]))
        writer.write(b'INFO\n')
        await writer.drain()
        result = await reader.read(1024)
        writer.close()
        if b"redis_version" in result:
            gLogger.myscan_info('target maybe redis unauth, {}'.format(addr))
            return {'name': 'unauth', 'url': addr, 'software': 'redis'}


# weak pass scan
async def check_weakpass(addr, up_list):
    with timeout(5):
        reader, writer = await asyncio.open_connection(addr.split(':')[0], int(addr.split(':')[1]))
        writer.write(b'INFO\n')
        await writer.drain()
        result = await reader.read(1024)
        if b"Authentication" in result:
            for _pass in up_list:
                try:
                    password = _pass.replace('\r', '').replace('\n', '')
                    message = 'AUTH {}\r\n'.format(password)
                    writer.write(message.encode())
                    await writer.drain()
                    result = await reader.read(1024)
                    writer.close()
                    if '+OK' in result.decode('utf-8'):
                        gLogger.myscan_info('target maybe redis weakpass, {}'.format(str(addr) + ' | ' + str(password)))
                        return {'name': 'weakpass', 'url': str(addr + ' | ' + str(password)), 'software': 'redis'}
                except Exception:
                    pass


async def redis_scan(addr):
    vul_list = []
    redis_password_list = InformationProvider.read_file('redis_passwords.txt')
    a = await check_unauth(addr)
    if a is not None:
        vul_list.append(a)
    b = await check_weakpass(addr, redis_password_list)
    if b is not None:
        vul_list.append(b)
    return vul_list


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(redis_scan('127.0.0.1:6379'))
