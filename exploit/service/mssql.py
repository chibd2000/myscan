# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-02 22:05

from core.data import gLogger, path_dict
import binascii
import asyncio


# https://github.com/WyAtu/Perun/blob/c081b9ed0243cecfcea251e72e2905103a6556a1/vuln/mssql/mssql_weakpwd.py
# async
# mssql每次请求都需要生成一个socket，因为每次请求完对方就直接关闭套接字，这里跟redis不一样
from core.utils.informationprovider import InformationProvider


async def check_weak_pass(addr, mssql_up_list):
    for username, password in mssql_up_list:
        try:
            reader, writer = await asyncio.open_connection(addr.split(':')[0], int(addr.split(':')[1]))
            # 组装数据
            hh = binascii.b2a_hex(addr.split(':')[0].encode())
            husername = binascii.b2a_hex(username.encode())
            lusername = len(username)
            lpassword = len(password)
            ladd = len(addr.split(':')[0]) + len(str(addr.split(':')[1])) + 1
            hladd = hex(ladd).replace('0x', '')
            hpwd = binascii.b2a_hex(password.encode())
            pp = binascii.b2a_hex(addr.split(':')[1].encode())
            address = hh.decode() + '3a' + pp.decode()
            hhost = binascii.b2a_hex(addr.split(':')[0].encode())
            data = "0200020000000000123456789000000000000000000000000000000000000000000000000000ZZ5440000000000000000000000000000000000000000000000000000000000X3360000000000000000000000000000000000000000000000000000000000Y373933340000000000000000000000000000000000000000000000000000040301060a09010000000002000000000070796d7373716cd4c6962726172790a00000000000d1175735f656e676c69736800000000000000000000000000000201004c000000000000000000000a000000000000000000000000000069736f5f31000000000000000000000000000000000000000000000000000501353132000000030000000000000000"
            data1 = data.replace(data[16:16 + len(address)], address)
            data2 = data1.replace(data1[78:78 + len(husername)], husername.decode())
            data3 = data2.replace(data2[140:140 + len(hpwd)], hpwd.decode())
            if lusername >= 16:
                data4 = data3.replace('0X', str(hex(lusername)).replace('0x', ''))
            else:
                data4 = data3.replace('X', str(hex(lusername)).replace('0x', ''))
            if lpassword >= 16:
                data5 = data4.replace('0Y', str(hex(lpassword)).replace('0x', ''))
            else:
                data5 = data4.replace('Y', str(hex(lpassword)).replace('0x', ''))
            hladd = hex(ladd).replace('0x', '')
            data6 = data5.replace('ZZ', str(hladd))
            data7 = binascii.a2b_hex(data6)
            writer.write(data7)
            await writer.drain()
            packet = await reader.read(1024)
            writer.close()
            if 'master' in str(packet) or 'tempdb' in str(packet):
                gLogger.myscan_info('Target maybe mssql weakpass, {}'.format(str(addr) + ' | ' + str(username) + '/' + str(password)))
                return {'name': 'weakpass', 'url': str(addr) + ' | ' + str(username) + '/' + str(password), 'software': 'mssql'}
        except ConnectionResetError:
            gLogger.myscan_error('connect error, {}'.format(addr))
            return
        except ConnectionRefusedError:
            gLogger.myscan_error('connect confuse, {}'.format(addr))
            return
        except OSError:
            gLogger.myscan_error('Connect call error, {}'.format(addr))
            return
        except Exception as e:
            if 'Errno 10061' in e.__str__() or 'timed out' in e.__str__():
                return
            else:
                pass


async def mssql_scan(addr):
    vul_list = []
    mssql_username_list = InformationProvider.read_file('sqlserver_usernames.txt')
    mssql_password_list = InformationProvider.read_file('sqlserver_passwords.txt')
    mssql_up_list = InformationProvider.generate(mssql_username_list, mssql_password_list)
    a = await check_weak_pass(addr, mssql_up_list)
    if a is not None:
        vul_list.append(a)
    return vul_list

if __name__ == '__main__':
    pass
