# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-02 22:06

from core.data import gLogger
from core.utils.informationprovider import InformationProvider
from async_timeout import timeout
import sys
import aiopg
import asyncio

if sys.platform == 'win32':
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())


# https://github.com/WyAtu/Perun/blob/c081b9ed0243cecfcea251e72e2905103a6556a1/vuln/postgresql/postgresql_weakpwd.py
async def check_weak_pass(addr, postgre_up_list):
    for username, password in postgre_up_list:
        try:
            with timeout(5):
                dsn = 'user={} password={} host={} port={}'.format(username, password, addr.split(':')[0], addr.split(':')[1])
                conn = await aiopg.connect(dsn)
                if conn:
                    gLogger.myscan_info('target maybe postgresql weakpass, {}'.format(addr))
                    return {'name': 'weakpass', 'url': str(addr), 'software': 'postgresql'}
        except Exception:
            pass


async def postgresql_scan(addr):
    vul_list = []
    postgre_username_list = InformationProvider.read_file('postgresql_usernames.txt')
    postgre_password_list = InformationProvider.read_file('postgresql_passwords.txt')
    postgre_up_list = InformationProvider.generate(postgre_username_list, postgre_password_list)
    a = await check_weak_pass(addr, postgre_up_list)
    if a is not None:
        vul_list.append(a)
    return vul_list


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(postgresql_scan('127.0.0.1:5444'))
