# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import *
from core.request.asynchttp import *


# fofa: app="ThinkPHP"
# python batch.py -m exploit.scripts.Thinkphp.unauth_rce -cs -fs "app=\"ThinkPHP\" && country=\"CN\""

class Script(BaseScript):
    name = 'ThinkPHP'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.RCE
        # 编号
        self.bug_number = 'CNVD-2018-24942'
        # 来源
        self.bug_refer = 'https://www.cnvd.org.cn/flaw/show/CNVD-2018-24942'
        # 特定路径判断
        self.detect_path = {
            'ICO': '/favicon.ico',
            'ERROR': '/1111111111111111111111111111111-index.html',
            'X-Powered-By': '/',
            'CC': '/?c=4e5e5d7364f443e28fbf0d3ae744a59a',
        }
        # exec
        self.exec_path_list = []
        # 相关信息
        self.info = 'Thinkphp 代码命令执行 version: ThinkPHP 5.*，<5.1.31, ThinkPHP <=5.0.23'
        # favicon
        self.favicon_md5_list = ['f49c4a4bde1eec6c0b80c2277c76e3db', 'a33d202b17b9b1a50e5ac54af6eff74e']

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            url = f'http://{self.target}{self.detect_path.get("ICO")}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{self.detect_path.get("ICO")}'
            favicon_md5 = await AsyncFetcher.get_favicon_md5_fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
            if favicon_md5 is not None and favicon_md5 in self.favicon_md5_list:
                self.flag = True
                gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

            # X-Powered-By
            url = f'http://{self.target}{self.detect_path.get("X-Powered-By")}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{self.detect_path.get("X-Powered-By")}'
            async with session.get(url=url, headers=self.headers, timeout=self.req_timeout, verify_ssl=False) as response:
                if response is not None and response.headers.get('X-Powered-By', '') and 'ThinkPHP' in response.headers.get('X-Powered-By', ''):
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

            # /1111111111111111111111111111111-index.html
            url = f'http://{self.target}{self.detect_path.get("ERROR")}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{self.detect_path.get("ERROR")}'
            text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
            if 'ThinkPHP' in text:
                self.flag = True
                gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

            # CC a33d202b17b9b1a50e5ac54af6eff74e
            url = f'http://{self.target}{self.detect_path.get("CC")}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{self.detect_path.get("CC")}'
            favicon_md5 = await AsyncFetcher.get_favicon_md5_fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
            if favicon_md5 is not None and favicon_md5 in self.favicon_md5_list:
                self.flag = True
                gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass
