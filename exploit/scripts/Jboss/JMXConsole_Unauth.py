# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-14 22:56

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *

# python batch.py -m exploit.scripts.Jboss.JMXConsole_Unauth -cs -fs "app=\"JBoss\" && country=\"CN\""


class Script(BaseScript):
    name = 'JBoss'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.UNAUTH
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/', '/favicon.ico']
        # exec
        self.exec_path_list = ['/jmx-console/']
        # priority
        self.priority = 1
        # 相关信息
        self.info = ''
        # favicon
        self.favicon_md5_list = ['799f70b71314a7508326d1d2f68f7519', '1b24a7a916a0e0901e381a0d6131b28d']

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            url = f'http://{self.target}/' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/'
            async with session.get(url=url, headers=self.headers, timeout=self.req_timeout, verify_ssl=False) as response:
                if response is not None:
                    await asyncio.sleep(2)
                    text = await response.text()
                    if 'jboss.css' in text:
                        self.flag = True
                        gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                        return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}
                    if response.headers.get('X-Powered-By', '') and 'JBoss' in response.headers.get('X-Powered-By', ''):
                        self.flag = True
                        gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                        return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}
                url = f'http://{self.target}/favicon.ico' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/favicon.ico'
                favicon_md5 = await AsyncFetcher.get_favicon_md5_fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if favicon_md5 in self.favicon_md5_list:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        async with aiohttp.ClientSession() as session:
            for execPath in self.exec_path_list:
                url = f'http://{self.target}{execPath}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{execPath}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and 'Management Console' in text:
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                    return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass
    # import requests
    # import hashlib
    # resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    #     m1.update(resp.content)
    #     theMD5 = m1.hexdigest()
    #     print(theMD5)

    # sem = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1, sem)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack())
