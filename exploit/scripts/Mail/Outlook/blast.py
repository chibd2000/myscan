# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugLevel, BugType
from core.request.asynchttp import *


# fofa: app="Outlook"
# python3 batch.py -m exploit.scripts.Mail.Outlook.blast -fs "app=\"Outlook\"" -cs

class Script(BaseScript):
    name = 'Outlook Mail'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.BLAST
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/owa/auth/logon.aspx']
        # exec
        self.exec_path_list = ['/ews']
        # 相关信息
        self.info = 'Outlook blast'

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and ('<!-- owapage = asp.auth_logon_aspx' in text or '/exchweb/bin/auth/owalogon.asp' in text or '/exchweb/bin/auth/owalogon.asp?url=' in text or 'href="/owa/auth/' in text or 'window.location.replace("/owa/" + window.location.hash);</script></head><body></body>' in text or '<meta http-equiv="refresh" content="0;url=/owa">' in text or 'themes/resources/segoeui-semibold.ttf' in text or ('<div class="signinheader">outlook</div>' in text and 'owalogocontainer' in text) or ('owapage = asp.auth_logon_aspx' in text and '/owa/' in text) or ('showpasswordcheck' in text and '/owa/' in text) or 'outlook' in text):
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        async with aiohttp.ClientSession() as session:
            for execPath in self.exec_path_list:
                url = f'http://{self.target}{execPath}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{execPath}'
                async with session.get(url=url, timeout=self.req_timeout, verify_ssl=False) as response:
                    if response is not None and response.status == 401:
                        await asyncio.sleep(2)
                        gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                        return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    import requests
    import hashlib

    resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)
