# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugLevel, BugType
from core.request.asynchttp import *

# fofa: app="apereo-CAS"
# python batch.py -m exploit.scripts.ApereoCAS.deserialize_rce -cs -fs "app=\"apereo-CAS\""


class Script(BaseScript):
    name = 'Apereo CAS'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 漏洞类型
        self.bug_type = BugType.DESERIALIZE
        # 漏洞编号
        self.bug_number = ''
        # 漏洞来源
        self.bug_refer = 'https://github.com/vulhub/Apereo-CAS-Attack'
        # 特定路径判断
        self.detect_path_list = ['/']
        # 特定路径利用
        self.exec_path_list = []
        # 相关漏洞信息
        self.info = '''影响范围 Apereo CAS 4.1.x - 4.16 Apereo CAS 4.1.7 - 4.2x
        '''

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and 'Central Authentication Service' in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass
