# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *


# fofa: 用友 && country="CN"
# python3 batch.py -m exploit.scripts.OA.yonyou.ufida_nc.deserialize_MxServlet -cs -fs "\"用友\" && country=\"CN\""

class Script(BaseScript):
    name = 'yonyou-ufida'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.DESERIALIZE
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = 'https://mp.weixin.qq.com/s/xVKuJb3DbKH0em0HoMZ4ZQ'
        # 特定路径判断
        self.detect_path_list = ['/']
        # exec
        self.exec_path_list = ['/service/MxServlet']
        # 相关信息
        self.info = '''用友-UFIDA-NC财务系统 nc v6.5'''

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and (('ufida_iufo_over.png' in text and 'ufida_nc.png' in text) or ('logo/images/' in text and 'ufida_nc' in text) or 'logo/images/ufida_nc.png' in text or '<div id="nc_text">' in text or '''<div id="nc_img" onmouseover="overimage('nc');''' in text):
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                async with session.get(url=url, headers=self.headers, timeout=self.req_timeout, verify_ssl=False) as response:
                    if response is not None and response.status == 500:
                        gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                        return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass