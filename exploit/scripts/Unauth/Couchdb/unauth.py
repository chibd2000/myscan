# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-08-27 18:36


from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugLevel, BugType
from core.request.asynchttp import *


# fofa: app="APACHE-CouchDB" && country="CN"
# python batch.py -m exploit.scripts.Unauth.Couchdb.unauth -cs -fs "app=\"APACHE-CouchDB\""


class Script(BaseScript):
    name = 'Couchdb'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.UNAUTH
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = []
        # exec
        self.exec_path_list = []
        # 相关信息
        self.info = ''
        # favicon
        self.favicon_md5_list = ['2ab2aae806e8393b70970b2eaace82e0']

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            url = f'http://{self.target}/' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/'
            async with session.get(url=url, headers=self.headers, timeout=self.req_timeout, verify_ssl=False) as response:
                if response is not None and response.headers.get('x-couchdb-body-time', '') and response.headers.get('Server', '') and \
                        '0' in response.headers.get('x-couchdb-body-time') and 'CouchDB' in response.headers.get('Server', ''):
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}
            url = f'http://{self.target}/favicon.ico' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/favicon.ico'
            favicon_md5 = await AsyncFetcher.get_favicon_md5_fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
            if favicon_md5 in self.favicon_md5_list:
                self.flag = True
                gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass