# coding=utf-8
# @Author   : zpchcbd HG team
# @Blog     : https://www.cnblogs.com/zpchcbd/
# @Time     : 2021-09-08 16:30

from core.component.variablemanager import GlobalVariableManager


class BaseScript:
    __slots__ = ('target', 'priority', 'bug_type', 'bug_number', 'bug_level', 'bug_refer', 'vul_list', 'info', 'flag', 'headers', 'is_run', 'req_timeout')

    def __init__(self):
        self.target = ''  # 探测目标
        self.bug_type = ''  # 漏洞类型
        self.bug_number = ''  # 漏洞编号
        self.bug_level = ''  # 漏洞等级
        self.bug_refer = ''  # 漏洞来源
        self.priority = 0  # 使用优先级
        self.is_run = 1  # 是否启用
        self.info = ''  # 漏洞信息
        self.flag = False  # 框架检测，为true之后才可以漏洞检测
        self.vul_list = []  # 可利用漏洞列表
        self.req_timeout = 30  # timeout set 30
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36'}
        # 'Connection': 'keep-alive'  # 实战中遇到的BUG

    async def detect(self):
        return None

    async def exec(self):
        return None

    def print(self):
        return [self.bug_type if self.bug_type else '无',
                self.bug_number if self.bug_number else '无',
                self.bug_level if self.bug_level else '无',
                self.bug_refer[:10] + '...' if self.bug_refer and len(self.bug_refer) > 10 else '无',
                self.info[:10] + '...' if self.info else '无']

    def print2(self):
        return "漏洞类型: %s|漏洞编号:%s|漏洞等级:%s|漏洞来源:%s|漏洞信息:%s" % (
            self.bug_type if self.bug_type else '无',
            self.bug_number if self.bug_number else '无',
            self.bug_level if self.bug_level else '无',
            self.bug_refer[:10] + '...' if self.bug_refer and len(self.bug_refer) > 10 else '无',
            self.info[:10] + '...' if self.info else '无'
        )

    async def attack(self):
        a = await self.detect()
        if a is not None:
            self.vul_list.append(a)
            if self.flag:
                b = await self.exec()
                if b is not None:
                    self.vul_list.append(b)
        return self.vul_list

    # multi scan
    def addInGlobalVariable(self, module_name):
        for _ in GlobalVariableManager.getValue('remain_module_list'):
            if _['name'] == module_name:
                _['domain'].append(self.target)
