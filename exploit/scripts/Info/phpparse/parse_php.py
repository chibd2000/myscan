# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *
import re


class Script(BaseScript):
    name = 'PHP Parse Bug'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.MISCONFIGURATION
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = ''
        # detect
        self.detect_path_list = ['/']
        # exec
        self.exec_path_list = []
        # 相关信息
        self.info = 'fast-cgi cgi.fix_pathinfo=1 / nginx cgi.fix_pathinfo=1'
        #
        self.image_regexp = '"([{}]?[^"]+\.({}))"'.format(self.target, '|'.join(['ico', 'jpg', 'gif', 'png', 'jpeg']))

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout, allow_redirects=False)
                re_images = re.findall(self.image_regexp, text)
                if re_images:
                    for image_path in re_images:
                        if url in image_path[0]:
                            image_url = image_path[0]
                        else:
                            image_url = url + '/' + image_path[0]
                        async with session.get(url=image_url, headers=self.headers, timeout=self.req_timeout, verify_ssl=False, allow_redirects=False) as response1:
                            if response1.status == 200:
                                self.flag = True
                                self.exec_path_list.append(image_url)

    async def exec(self):
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'{exec_path}/.php' if self.target.startswith(('http:', 'https:')) is False else f'{exec_path}/.php'
                async with session.get(url=url, headers=self.headers, timeout=self.req_timeout, verify_ssl=False, allow_redirects=False) as response:
                    if response is not None and response.status == 200:
                        text = await response.read()
                        await asyncio.sleep(2)
                        if b'\x00' in text and 'Content-Type' in response.headers.keys() and 'text/html' in response.headers.get('Content-Type', ''):
                                gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                                return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    asyncio.get_event_loop().run_until_complete(Script('http://testphp.vulnweb.com').attack())

    # import requests
    # import hashlib

    # resp = requests.get('https://50.84.113.154:8443/favicon.ico', verify=False)
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    #     m1.update(resp.content)
    #     theMD5 = m1.hexdigest()
    #     print(theMD5)
