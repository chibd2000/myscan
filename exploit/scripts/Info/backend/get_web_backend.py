# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-14 22:56

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *


# python3 batch.py -m exploit.scripts.Info.backend.get_web_backend -u  http://61.153.220.218:800 -cs

class Script(BaseScript):
    name = 'Get Web Backend'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.MEDIUM
        # 类型
        self.bug_type = BugType.FINGER
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/', '/admin', '/login', '/system', '/manage', '/manager', '/admin.jsp', '/admin.aspx', '/admin.php', '/admin.asp', '/login.jsp', '/login.aspx', '/login.asp', '/login.asp', '/index.php?m=admin']
        # exec
        self.exec_path_list = []
        # 相关信息
        self.info = '快速寻找登录口打点，用于寻找后台地址的模块'
        # keywords
        self.keywords = ['admin', 'manage', 'system', 'login', '登录', '后台', '管理', '系统', '登 录']

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=10)
                if text is not None:
                    for keyword in self.keywords:
                        if keyword in text and \
                                'Not Found' not in text and \
                                '页面不存在' not in text and \
                                '访问地址无效' not in text and \
                                'HTTP 404' not in text and \
                                'Page not found' not in text and \
                                '无法进行访问' not in text and \
                                '站点不存在' not in text and \
                                'status 404' not in text:
                            gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                            return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}


if __name__ == '__main__':
    asyncio.get_event_loop().run_until_complete(Script('').attack())
