# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import *
from core.request.asynchttp import *


class Script(BaseScript):
    name = 'get_svn_leak'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.BACKUP
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/.svn/entries']
        # exec
        self.exec_path_list = []
        # 相关信息
        self.info = 'svn leak'

    async def detect(self):
        try:
            async with aiohttp.ClientSession() as session:
                for detect_path in self.detect_path_list:
                    url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                    text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout, allow_redirects=False)
                    if text is not None and ('dir' in text and 'svn' in text):
                        self.flag = True
                        gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                        return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}
        except Exception:
            return None


if __name__ == '__main__':
    pass