# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugType,BugLevel
from core.request.asynchttp import *

# "weblogic" && country="CN"
# python batch.py -m

"""
漏洞验证环境为:10.3.6.0
"""

class Script(BaseScript):
    name = 'Weblogic-CVE-2019-2618'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.BLAST
        # 编号
        self.bug_number = 'CVE-2019-2618'
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/', '/console']
        # exec
        self.exec_path_list = ['/bea_wls_deployment_internal/DeploymentService',
                               '/bea_wls_deployment_internal/DeploymentService1']
        # 相关信息
        self.info = ''' Weblogic 10.3.6.0 Weblogic 12.1.3.0 Weblogic 12.2.1.3
        CVE-2019-2618漏洞主要是利用了WebLogic组件中的DeploymentService接口，该接口支持向服务器上传任意文件。
        攻击者突破了OAM（Oracle Access Management）认证，设置wl_request_type参数为app_upload，构造文件上传格式的POST请求包，
        上传jsp木马文件，进而可以获得整个服务器的权限。
        '''

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and ('Hypertext Transfer Protocol' in text or '<i>Hypertext Transfer Protocol -- HTTP/1.1</i>' in text or '/console/framework/skins/wlsconsole/images/login_WebLogic_branding.png' in text or 'WebLogic' in text and 'Welcome to Weblogic Application Server' in text or 'Error 403--' in text or 'Error 404--Not Found' in text or 'Oracle WebLogic Server' in text):
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        status_code_list = []
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                async with session.get(url=url, headers=self.headers, timeout=self.req_timeout, verify_ssl=False) as response:
                    if response is not None:
                        status_code_list.append(response.status)
                if status_code_list[0] == 200 and status_code_list[1] != 200:
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                    return {'name': 'Weblogic CVE_2019_2618'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass
