# coding=utf-8
# @Author   : zpchcbd HG team
# @Blog     : https://www.cnblogs.com/zpchcbd/
# @Time     : 2021-09-11 23:13

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import *
from core.request.asynchttp import *


class Script(BaseScript):
    name = 'RuiJie'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.FINGER
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = '''eweb https://blog.csdn.net/qq_41617034/article/details/119532322
        rg-uac https://blog.csdn.net/Adminxe/article/details/114584215
        vpn:https://mp.weixin.qq.com/s/iRmDQJH23FJ6mL_GzXeL6g
        vpn:https://mp.weixin.qq.com/s/WElrjPnCNNA79COFtPX0vQ
        smart-scripts:
            `title="无线smartWeb--登录页面"`
            默认guest账户密码：guest/guest
            登录后访问：`http://target/web/xml/webuser-auth.xml`
            获取所有用户账号密码，base64解码即可。
        '''
        # 特定路径判断
        self.detect_path_list = ['/']
        # exec
        self.exec_path_list = []
        # 相关信息
        self.info = 'RuiJie Eweb / Gateway / Smart Web / SSL VPN'

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'https://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and ('ruijie' in text or '锐捷' in text):
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass