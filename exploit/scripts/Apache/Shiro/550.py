# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-08 16:30

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *


# fofa: app="APACHE-Shiro" && country="CN"
# python batch.py -m exploit.scripts.Apache.Shiro.550 -cs -fs "app=\"APACHE-Shiro\" && country=\"CN\""

class Script(BaseScript):
    name = 'Apache Shiro'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.DESERIALIZE
        # 编号
        self.bug_number = 'CVE-2016-4437'
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/']
        # exec
        self.exec_path_list = []
        # 相关信息
        self.info = 'Shiro 550 deserialize'

    async def detect(self):
        headers = self.headers.copy()
        headers.update({'Cookie': 'rememberMe=1'})
        try:
            async with aiohttp.ClientSession() as session:
                for detect_path in self.detect_path_list:
                    url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                    async with session.get(url=url, headers=headers, timeout=self.req_timeout, verify_ssl=False, allow_redirects=False) as response:
                        if response is not None:
                            if response.status == 200:
                                if 'rememberMe=deleteMe' in str(response.headers):
                                    self.flag = True
                                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}
                            elif response.status == 302 or response.status == 304 or response.status == 301:
                                # 实战中遇到了，多加一个301跳转的情况
                                async with session.get(url=url, headers=headers, timeout=self.req_timeout, verify_ssl=False, allow_redirects=True) as response2:
                                    if response2 is not None and 'rememberMe=deleteMe' in str(response2.headers):
                                        self.flag = True
                                        gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                                        return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}
        except Exception:
            return None

if __name__ == '__main__':
    pass
